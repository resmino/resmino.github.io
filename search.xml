<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.两数之和(C语言)</title>
    <url>/2023/077204.html</url>
    <content><![CDATA[<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p>
<pre class="line-numbers language-none"><code class="language-none">示例 1： 输入：nums &#x3D; [2,7,11,15], target &#x3D; 9 输出：[0,1] 解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。

示例 2： 输入：nums &#x3D; [3,2,4], target &#x3D; 6 输出：[1,2]

示例 3： 输入：nums &#x3D; [3,3], target &#x3D; 6 输出：[0,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="解题方法：暴力枚举"><a href="#解题方法：暴力枚举" class="headerlink" title="解题方法：暴力枚举"></a>解题方法：暴力枚举</h1><p>可能是第一时间想到的方法，遍历nums中的元素x，并在数组中检索是否存在值为target-x的元素，若存在则输出下标。该方法时间复杂度为O(n*2）。</p>
<pre class="line-numbers language-none"><code class="language-none">int* twoSum(int* nums, int numsSize, int target, int* returnSize)&#123;
   for(int i&#x3D;0;i&lt;numsSize;i++)
   &#123;
       
       for(int j&#x3D;i+1;j&lt;numsSize;j++)
       &#123;
           if(nums[j]&#x3D;&#x3D;target-nums[i])
           &#123;
               int* ret&#x3D;malloc(sizeof(int)*2);
               ret[0]&#x3D;i,ret[1]&#x3D;j;
               *returnSize&#x3D;2;
               return ret;
           &#125; 
       &#125;
   &#125;
   *returnSize&#x3D;0;
   return NULL;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode题解</tag>
        <tag>LeetCode</tag>
        <tag>两数之和</tag>
      </tags>
  </entry>
  <entry>
    <title>13.罗马数字转整数(Java)</title>
    <url>/2023/08156c09fb.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>罗马数字包含以下七种字符: I:1， V:5， X:10， L:50，C:100，D:500 和 M:1000。<br>通常情况下，罗马数字中小的数字在大的数字的右边。<br>但也存在特例，例如 4 不写做 IIII，而是 IV。<br>数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。<br>同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</p>
</blockquote>
<p>给定一个罗马数字，将其转换成整数。</p>
<blockquote>
<p>示例1：<br>输入: s &#x3D; “III”<br>输出: 3</p>
</blockquote>
<blockquote>
<p>示例2：<br>输入: s &#x3D; “IV”<br>输出: 4</p>
</blockquote>
<blockquote>
<p>示例3：<br>输入: s &#x3D; “MCMXCIV”<br>输出: 1994<br>解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p>对于罗马数字而言，小数在大数之前为一个组合，且该组合的值为大数减去小数（例CM&#x3D;900）。故根据字符串长度遍历罗马字符，并进行是否能构成组合的判断，进而获取各个字符和字符组合的和，得出整数的值。</p>
</blockquote>
<p><strong>具体步骤如下：</strong></p>
<ol>
<li>使用length()获取罗马数字组成的字符串的长度</li>
<li>根据字符长度进行遍历</li>
<li>遍历过程中，判断小数是否在大数前，若是则计算该字符组合的数值，反之为该字符的值</li>
<li>判断是否为组合时注意不要超过字符长度导致出现错误</li>
<li>计算罗马数字代表的总和</li>
</ol>
<h1 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token char">'I'</span><span class="token operator">:</span> 
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                   <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'V'</span><span class="token punctuation">)</span>
                   <span class="token punctuation">&#123;</span>
                       sum<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
                   <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'X'</span><span class="token punctuation">)</span>
                   <span class="token punctuation">&#123;</span>
                       sum<span class="token operator">+=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
                   <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
                   <span class="token punctuation">&#123;</span>
                       sum<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
                <span class="token punctuation">&#123;</span>
                    sum<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">'V'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">'X'</span><span class="token operator">:</span> 
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'L'</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        sum<span class="token operator">+=</span><span class="token number">40</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'C'</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        sum<span class="token operator">+=</span><span class="token number">90</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
                    <span class="token punctuation">&#123;</span>
                        sum<span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
                <span class="token punctuation">&#123;</span>
                    sum<span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">'L'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">'C'</span><span class="token operator">:</span> 
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'D'</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        sum<span class="token operator">+=</span><span class="token number">400</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'M'</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        sum<span class="token operator">+=</span><span class="token number">900</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
                    <span class="token punctuation">&#123;</span>
                        sum<span class="token operator">+=</span><span class="token number">100</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
                <span class="token punctuation">&#123;</span>
                    sum<span class="token operator">+=</span><span class="token number">100</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span><span class="token number">500</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">'M'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>sum<span class="token operator">+=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="解题记录"><a href="#解题记录" class="headerlink" title="解题记录"></a>解题记录</h1><p>最初使用C语言实现，但过程中由于出现数组下标溢出的问题无法在LeetCode上通过运行，所以转而使用Java语言。<br><em><strong>本次解题过程未借鉴他人题解，故所编写的代码未考虑时间复杂度和空间复杂度，且未对代码进行优化，谨慎参考。</strong></em><br>在使用java语言实现的过程中，只考虑了解决题目，对于优化方面，代码的简化方面做的不够好，需进一步加强练习。<br>本次解题所占时间和空间如下所示。</p>
<img data-src="/2023/08156c09fb/d638e87527e54f32ba4c4314472f5030.png" class>

]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>leetcode题解</tag>
      </tags>
  </entry>
  <entry>
    <title>14.最长公共前缀(Java)</title>
    <url>/2023/08682584a4.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>题目描述：<br>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。</p>
</blockquote>
<blockquote>
<p>示例1：<br>输入：strs &#x3D; [“flower”,”flow”,”flight”]<br>输出：”fl”</p>
</blockquote>
<blockquote>
<p>示例2：<br>输入：strs &#x3D; [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p><strong>解题思路：</strong><br>对于空字符数组直接返回“”作为公共前缀；对于非空数组，则随机选一个字符串作为初始公共前缀（因为公共前缀的最大长度一定小于等于数组中最短的那个字符串，所以可以随机选择一个字符串作为初始前缀），之后使用String类中的方法startsWith（）在for循环中判断字符串是否含有该前缀，若没有则缩短公共前缀的长度，在缩短之前判断变量(公共前缀)的长度是否为0，若为0则返回空字符串“”。</p>
</blockquote>
<blockquote>
<p><strong>解题步骤如下：</strong><br>1、判断字符数组的长度是否为0，若为0则返回空字符串“”<br>2、对于非空字符串则选择第一个字符串作为初始公共前缀<br>3、遍历字符串数组，判断前缀变量的长度是否为0，若不为0则使用startswith方法判断是否含有该公共前缀<br>4、若不该前缀，则缩短前缀变量的长度，继续判断<br>5、当遍历结束后，返回公共前缀。</p>
</blockquote>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>     <span class="token comment">//空则返回“”</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//初始前缀</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span>strs<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//判断是否含有该前缀</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
                s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前缀长度-1</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="解题记录"><a href="#解题记录" class="headerlink" title="解题记录"></a>解题记录</h1><p>在解决该题时，最初的思路是先遍历字符串数组，找出字符串长度最短的字符串作为初始前缀的值，然后进行横向扫描解题。后通过借鉴他人思路，使用startsWith方法进行前缀判断。<br>后查看官方题解，看到多种解题思路，如二分查找、纵向扫描等方法。</p>
<img data-src="/2023/08682584a4/6d21bc19977b4ac3a171e2d685b70983.png" class>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>leetcode题解</tag>
      </tags>
  </entry>
  <entry>
    <title>2.两数相加(C语言)</title>
    <url>/2023/077402.html</url>
    <content><![CDATA[<h1 id="LeetCode题解-2-两数相加（C语言）"><a href="#LeetCode题解-2-两数相加（C语言）" class="headerlink" title="LeetCode题解-2.两数相加（C语言）"></a>LeetCode题解-2.两数相加（C语言）</h1><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>给你两个<strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
</blockquote>
<p>输入与输出示例如下1所示：</p>
<blockquote>
<p>示例 1：<br>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.</p>
</blockquote>
<blockquote>
<p>示例 2：<br>输入：l1 &#x3D; [0], l2 &#x3D; [0]<br>输出：[0]</p>
</blockquote>
<blockquote>
<p>示例 3：<br>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p>在逆序的列表中，每一项直接相加就是该位的值，通过设置一个变量记录进位。对于长度短的数字进行补0，然后相加，将处理后的每一项插入结果链表。<br>1、创建结果链表<br>2、遍历给定的两个链表<br>3、取结点值进行相加，并记录进位值carry，注意短数补0<br>4、遍历结束后，判断进位是否大于0，是则插入结果列表</p>
<p>在实现该题过程中，借鉴了官方的题解，最终按着自己的理解写出该题。</p>
</blockquote>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>L<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>node<span class="token punctuation">;</span>   <span class="token comment">//新建结果链表</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment">//存放进位</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">||</span>l2<span class="token punctuation">)</span>                <span class="token comment">//链表非空继续计算</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> l1 <span class="token operator">?</span>l1<span class="token operator">-></span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//l1的结点非空则取该结点的值否则将该位置0</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> l2 <span class="token operator">?</span>l2<span class="token operator">-></span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>   
        <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span>carry<span class="token punctuation">;</span>   <span class="token comment">//求和</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">)</span>                    <span class="token comment">//如果结果列表为空，则使头指针指向结点node</span>
        <span class="token punctuation">&#123;</span>
            node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            L <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>                     <span class="token comment">//在结果链表后插入结点</span>
        <span class="token punctuation">&#123;</span>
            node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>
            node<span class="token operator">-></span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">//求进位</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>                    <span class="token comment">//l1、l2非空后移</span>
        <span class="token punctuation">&#123;</span>
            l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token comment">//将最后的进位插入链表</span>
    <span class="token punctuation">&#123;</span>
        node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>
        node<span class="token operator">-></span>val <span class="token operator">=</span> carry<span class="token punctuation">;</span>
        node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> L<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="个人记录"><a href="#个人记录" class="headerlink" title="个人记录"></a>个人记录</h1><p>在第一次实现中，在进行链表插入时出现错误，导致只能输出第一个数字和最后一个数字。原因则是反复将后续结点插入结果链表的第二个节点位置。导致无法得出正确结果，提交错误。</p>
<img data-src="/2023/077402/7f053c1ad63044d09777ab8286577aff.png" class>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode题解</tag>
        <tag>LeetCode</tag>
        <tag>两数之和</tag>
      </tags>
  </entry>
  <entry>
    <title>20.有效的括号(Java)</title>
    <url>/2023/08babf7f31.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>题目描述：<br>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。<br>有效字符串需满足：<br><strong>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</strong></p>
</blockquote>
<blockquote>
<p>示例1：<br>输入：s &#x3D; “()”<br>输出：true</p>
</blockquote>
<blockquote>
<p>示例2：<br>输入：s &#x3D; “()[]{}”<br>输出：true</p>
</blockquote>
<blockquote>
<p>示例3：<br>输入：s &#x3D; “(]”<br>输出：false</p>
</blockquote>
<blockquote>
<p><strong>示例4：</strong><br>输入：s&#x3D;”({[]})”<br>输出：true</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p><strong>题目分析：</strong><br>题目中所说的有效括号仅指字面意义上的有效，即不考虑数学意义上括号的意义：也就是说，只要括号正确闭合就行，类似 <strong>（[]）、（{}）、[{}]、（[{}]）</strong> 等也符合题目中有效括号的定义。<strong>例如示例4输出为true</strong></p>
</blockquote>
<blockquote>
<p><strong>思路1：</strong><br>对于任何有效的初始括号字符串均至少含有（）、{}、[]三对括号中的一对，故使用contains（）循环判断是否含有这三对括号，若有则使用replace（）删除，最终有效字符串会删减为空串，将最终的字符串使用equals(“”)比较，为空串则有效，反之无效。<br><em><strong>该思路是我自己解题的思路，但由于在循环内调用函数，导致时间复杂度和空间复杂度高，性能差，代码见下方</strong></em></p>
</blockquote>
<blockquote>
<p><strong>解题步骤如下：</strong><br>1、whie循环，以字符串是否含有()、[]、{}三对括号为循环条件<br>2、while循环内，以空字符“”替换字符串中的()、[]、{}<br>3、循环以字符串内不含有三对括号结束<br>4、判断最终字符串是否为空串，为空则true，反之为false</p>
</blockquote>
<blockquote>
<p><strong>思路2：</strong><br>使用栈，利用stack的后进先出的特性，遍历括号字符串。<br>若字符串以(、[、{开头，且从左至右遍历过程中，遇到(、[、{则向stack栈中压入对应的右括号，遇到)、]、}则弹出栈顶元素并与当前字符比较，相同则继续，不同则结束返回false。<br>若字符串以)、]、}三者之一开头，则为无效字符串，以栈空为条件结束返回false<br><em><strong>该思路借鉴了他人的题解，很强大</strong></em></p>
</blockquote>
<blockquote>
<p><strong>解题步骤</strong><br>1、声明一个空栈<br>2、使用toCharArray()将字符串转为字符数组，并在for循环中遍历<br>3、循环内：若该字符对应(、[、{则向栈中压入对应的右括号；反之则弹出栈顶元素并判断是否与当前字符相同且栈是否为空栈。若为空栈或与栈顶元素不同，则返回false<br>4、循环结束后，判断栈是否为空，为空则有效；反之无效。</p>
</blockquote>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//思路1代码如下</span>
<span class="token comment">//时间空间耗费高</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"()"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"()"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//思路2代码如下</span>
<span class="token comment">//改进,借鉴了他人思路</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span>stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'['</span><span class="token punctuation">)</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>ch <span class="token operator">!=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="解题记录"><a href="#解题记录" class="headerlink" title="解题记录"></a>解题记录</h1><p><strong>该题总共提交了五次化，花费了挺多时间，前四次依照自己的解题思路，前三次出错，第四次成功但占用时间空间多，第五次为借鉴他人思路优化解题。</strong><br>第一次解题：只考虑了括号的数量成对，未考虑括号的位置<br>第二次解题：想的太多，认为{}<a href></a>的包含关系是固定的，即[{}] 为无效括号<br>第三次解题：对于空字符串的判断使用！&#x3D;null 而不是equals()导致错误<br>第四次解题：成功运行，但时间空间占用多，如下图所示</p>
<img data-src="/2023/08babf7f31/9a758bf898e449b68232576dbcc204c4.png" class>
<p>第五次解题：借鉴他人思路，使用栈优化代码，结果如下所示。</p>
<img data-src="/2023/08babf7f31/b53b123f5fa44101b3e9f83d52467dc5.png" class>

]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>leetcode题解</tag>
      </tags>
  </entry>
  <entry>
    <title>21.合并两个有序链表</title>
    <url>/2023/08afbd1d19.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p><strong>题目描述：</strong><br>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
</blockquote>
<blockquote>
<p><strong>示例1：</strong><br>输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]<br>输出：[1,1,2,3,4,4]</p>
</blockquote>
<blockquote>
<p><strong>示例2：</strong><br>输入：l1 &#x3D; [], l2 &#x3D; []<br>输出：[]</p>
</blockquote>
<blockquote>
<p><strong>示例3：</strong><br>输入：l1 &#x3D; [], l2 &#x3D; [0]<br>输出：[0]</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p><strong>思路1：</strong><br>直接遍历比较两个链表的元素值，并使用尾插法将小值插入新链表中。</p>
</blockquote>
<blockquote>
<p><strong>思路1步骤如下：</strong><br>1、判断两个链表是否有空链，有空则直接返回非空链表。<br>2、循环遍历：当两个链表结点都不为空时，比较结点值大小，小值以尾插法插入新链表<br>3、当有一链表遍历至结尾为空时，将另一链表剩余结点链接到新链表尾部<br>4、返回新链表</p>
</blockquote>
<blockquote>
<p><strong>思路2：</strong><br>使用递归，合并有序链表，具体代码见下方。<br>题外话：递归的思路借鉴了他人的题解，看到别人的解题思路，不得不感叹，自己就是个小菜鸡，大佬的代码看起来真赏心悦目。</p>
</blockquote>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//思路1代码如下</span>
struct <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token operator">*</span> list1<span class="token punctuation">,</span> struct <span class="token class-name">ListNode</span><span class="token operator">*</span> list2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    struct <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token class-name">L</span> <span class="token punctuation">,</span><span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>
    <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">L</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    r <span class="token operator">=</span><span class="token class-name">L</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>list2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>list1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> list2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token operator">-></span>val <span class="token operator">&lt;=</span> list2<span class="token operator">-></span>val<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            s <span class="token operator">=</span> <span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token operator">-></span>val <span class="token operator">=</span> list1<span class="token operator">-></span>val<span class="token punctuation">;</span>
            r<span class="token operator">-></span>next<span class="token operator">=</span> s<span class="token punctuation">;</span>
            r <span class="token operator">=</span> s<span class="token punctuation">;</span>
            list1 <span class="token operator">=</span> list1<span class="token operator">-></span>next<span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            s <span class="token operator">=</span> <span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token operator">-></span>val <span class="token operator">=</span> list2<span class="token operator">-></span>val<span class="token punctuation">;</span>
            r<span class="token operator">-></span>next<span class="token operator">=</span> s<span class="token punctuation">;</span>
            r <span class="token operator">=</span> s<span class="token punctuation">;</span>
            list2 <span class="token operator">=</span> list2<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>list1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token operator">-></span>val <span class="token operator">=</span> list1<span class="token operator">-></span>val<span class="token punctuation">;</span>
        r<span class="token operator">-></span>next<span class="token operator">=</span> s<span class="token punctuation">;</span>
        r <span class="token operator">=</span> s<span class="token punctuation">;</span>
        list1 <span class="token operator">=</span> list1<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span>list2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token operator">-></span>val <span class="token operator">=</span> list2<span class="token operator">-></span>val<span class="token punctuation">;</span>
        r<span class="token operator">-></span>next<span class="token operator">=</span> s<span class="token punctuation">;</span>
        r <span class="token operator">=</span> s<span class="token punctuation">;</span>
        list2 <span class="token operator">=</span> list2<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">L</span><span class="token operator">-></span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//思路二代码</span>
<span class="token comment">//（1）自己写的递归代码如下</span>
struct <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token operator">*</span> list1<span class="token punctuation">,</span> struct <span class="token class-name">ListNode</span><span class="token operator">*</span> list2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    struct <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token class-name">L</span><span class="token punctuation">;</span>
    <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">L</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>list2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token operator">-></span>val <span class="token operator">&lt;=</span> list2<span class="token operator">-></span>val<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
       <span class="token class-name">L</span><span class="token operator">-></span>val <span class="token operator">=</span> list1<span class="token operator">-></span>val<span class="token punctuation">;</span>
       <span class="token class-name">L</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token operator">-></span>next<span class="token punctuation">,</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token class-name">L</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
   <span class="token punctuation">&#123;</span>
       <span class="token class-name">L</span><span class="token operator">-></span>val <span class="token operator">=</span> list2<span class="token operator">-></span>val<span class="token punctuation">;</span>
       <span class="token class-name">L</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token class-name">L</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//(2）借鉴递归题解代码如下</span>
struct <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>struct <span class="token class-name">ListNode</span><span class="token operator">*</span> list1<span class="token punctuation">,</span> struct <span class="token class-name">ListNode</span><span class="token operator">*</span> list2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>list2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token operator">-></span>val <span class="token operator">&lt;=</span> list2<span class="token operator">-></span>val<span class="token punctuation">)</span>
   <span class="token punctuation">&#123;</span>
       list1<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token operator">-></span>next<span class="token punctuation">,</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
   <span class="token punctuation">&#123;</span>
       list2<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="解题记录"><a href="#解题记录" class="headerlink" title="解题记录"></a>解题记录</h1><p>在解决本题时最初的思路就是通过遍历比较值的大小然后合并两个链表，并且由于对于链表知识的遗忘，导致具体实现过程中出现一些错误，且时间花费在复习链表知识上。后来成功提交后，看了题解，才发现可以使用递归解决该题目，并自己尝试着写递归，能成功提交，但占用内存相比官方递归代码多。<br><strong>第一次提交：</strong> 遍历比较值，合并链表，结果如下所示</p>
<img data-src="/2023/08afbd1d19/91cc492783b242439907cf6562f134cf.png" class>
<p><strong>第二次提交：</strong> 自己写的递归，结果如下</p>
<img data-src="/2023/08afbd1d19/83e5ed59cc0f48eca40bdb2a6ea5c3f9.png" class>

<p><strong>第三次提交：</strong> 官方递归，结果如下</p>
<img data-src="/2023/08afbd1d19/f005d143ce6d4343a087080c40b1ac50.png" class>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>leetcode题解</tag>
      </tags>
  </entry>
  <entry>
    <title>26.删除有序数组中的重复项</title>
    <url>/2023/08fed1388b.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p><strong>题目描述</strong>：<br>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 一致 。<br>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。<br>将最终结果插入 nums 的前 k 个位置后返回 k 。<br>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。<br><em><strong>总结：</strong></em> <strong>保持元素的相对位置不变，去重，并将去重后的k个元素存放在nums的前k个位置。</strong></p>
</blockquote>
<blockquote>
<p><strong>示例1：</strong><br>输入：nums &#x3D; [1,1,2]<br>输出：2, nums &#x3D; [1,2,_]<br>解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<blockquote>
<p><strong>示例2：</strong><br>输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]<br>输出：5, nums &#x3D; [0,1,2,3,4]<br>解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p><strong>解题思路：</strong><br>设置两个变量<code>count=1、i=1</code>，初始值均为1。<br>i作为遍历元素下标，<code>count</code>作为去重数组下标。<br>在<code>for</code>循环遍历数组，遍历过程中比较元素值，若当前元素与前一元素值相等，结束本次循环进入下一次循环，若不相等则将<code>nums[count++] = nums[i]</code>;循环结束后返回<code>count</code>值。</p>
</blockquote>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="解题记录"><a href="#解题记录" class="headerlink" title="解题记录"></a>解题记录</h1><p>在解决本次题目时，我最初的想法是使用双层for循环，但在具体实现过程中出现无法实现对重复数&gt;&#x3D;3的元素进行去重，后借鉴他人解题思路，使用一层for循环，并结合continue实现去重。<br>提交结果如下。</p>
<img data-src="/2023/08fed1388b/b89ce3bd740b4b81b62d05d64a022194.png" class>

]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>leetcode题解</tag>
      </tags>
  </entry>
  <entry>
    <title>3.无重复字符的最长子串(C语言)</title>
    <url>/2023/0746254.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<blockquote>
<p>示例 1:<br>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:<br>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:<br>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>
</blockquote>
<blockquote>
<p>提示：<br>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 104<br>s 由英文字母、数字、符号和空格组成</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p>1、使用count记录无重复子串的长度<br>2、start记录当前子串起始位置下标<br>3、max记录最大子串长度<br>4、使用index的值记录当前字符在字符串中的位置坐标<br>5、遍历字符串s<br>6、若字符串无重复字符，返回count，即当前字符串长度<br>7、若有重复字符，则改变子串起始位置start的值为当前字符上一次出现的位置下标<br>8、比较count与max的值，记录最大子串长度。</p>
</blockquote>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>index<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//字符串长度</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>start<span class="token punctuation">)</span>     <span class="token comment">//重复字符的index值大于start</span>
        <span class="token punctuation">&#123;</span>
            count <span class="token operator">=</span> i <span class="token operator">-</span> start<span class="token punctuation">;</span>    <span class="token comment">//计算滑动窗口长度</span>
            start <span class="token operator">=</span> index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//更新起始位置</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">></span>max<span class="token punctuation">)</span>         <span class="token comment">//更新最大长度</span>
            <span class="token punctuation">&#123;</span>
                max <span class="token operator">=</span> count<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            
        <span class="token punctuation">&#125;</span>
        index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//当前字符的位置下标</span>
    <span class="token punctuation">&#125;</span>
    count <span class="token operator">=</span> i <span class="token operator">-</span> start<span class="token punctuation">;</span>       <span class="token comment">//若字符串无重复，则count为最大子串长度</span>
    <span class="token keyword">return</span> count<span class="token operator">></span>max<span class="token operator">?</span>count<span class="token operator">:</span>max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="个人记录"><a href="#个人记录" class="headerlink" title="个人记录"></a>个人记录</h1><p>在该题中，花费了较多的时间，在尝试使用滑动窗口解题过程时出现错误。后来借鉴了其他用户的题解过程，并按着自己的理解完成该题。</p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode题解</tag>
        <tag>LeetCode</tag>
        <tag>两数之和</tag>
      </tags>
  </entry>
  <entry>
    <title>88.合并两个有序数组</title>
    <url>/2023/0815739779.html</url>
    <content><![CDATA[<h1 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h1><p><strong>点击跳转</strong>: <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tZXJnZS1zb3J0ZWQtYXJyYXkvZGVzY3JpcHRpb24v">LeetCode-No88. 合并两个有序数组<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote>
<p>当看到这一题的时候，想到了两种解法，有一种是一定可以实现的，另一种可能实现较为麻烦。</p>
</blockquote>
<ul>
<li><p>1、先合并数组，然后直接排序。合并简单，直接一个for循环即可，而排序的话这里有两种方法</p>
<ul>
<li><p>使用Arrays.sort()方法直接排序</p>
</li>
<li><p>使用冒泡排序</p>
</li>
</ul>
</li>
<li><p>2、因为是两个有序非递减数组，所以考虑倒序，边比较边排序</p>
</li>
</ul>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="先合并再排序"><a href="#先合并再排序" class="headerlink" title="先合并再排序"></a>先合并再排序</h2><h3 id="代码1（使用sort）"><a href="#代码1（使用sort）" class="headerlink" title="代码1（使用sort）"></a>代码1（使用sort）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            nums1<span class="token punctuation">[</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结果1"><a href="#结果1" class="headerlink" title="结果1"></a>结果1</h3><img data-src="/2023/0815739779/image-20230804161324898.png" class>

<h3 id="代码2（冒泡）"><a href="#代码2（冒泡）" class="headerlink" title="代码2（冒泡）"></a>代码2（冒泡）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            nums1<span class="token punctuation">[</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    temp <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    nums1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结果2"><a href="#结果2" class="headerlink" title="结果2"></a>结果2</h3><img data-src="/2023/0815739779/image-20230804161616211.png" class>



<h2 id="倒序排序"><a href="#倒序排序" class="headerlink" title="倒序排序"></a>倒序排序</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">
class Solution &#123;
     public void merge(int [] nums1,int m, int [] nums2,int n)&#123;
        int index &#x3D; m+n-1;
        while(n&gt;0 &amp;&amp; m&gt;0)&#123;
            if(nums1[m-1]&gt;&#x3D;nums2[n-1])&#123;
                nums1[index--]&#x3D;nums1[m-1];
                m--;
            &#125;else&#123;
                nums1[index--]&#x3D;nums2[n-1];
                n--;
            &#125;
        &#125;
        if(m&#x3D;&#x3D;0)&#123;
           while(n-1&gt;&#x3D;0)&#123;
               nums1[index--]&#x3D;nums2[--n];
           &#125;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><img data-src="/2023/0815739779/image-20230804161422446.png" class>

]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>leetcode题解</tag>
      </tags>
  </entry>
  <entry>
    <title>9.回文数</title>
    <url>/2023/0715753.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>题目描述：<br>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。<br>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>例：121是<br>  -121不是</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p><strong>思路一：</strong><br><em><strong>最初想到是使用java语言，直接将int型变量转为字符串，然后将字符串倒序，比较两个字符串是否相同，若相同则输出true，反之为false</strong></em></p>
</blockquote>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">代码如下所示：
class Solution &#123;
    public boolean isPalindrome(int x) &#123;
        String str &#x3D; Integer.toString(x);
        String s &#x3D; new StringBuffer(str).reverse().toString(); &#x2F;&#x2F;直接逆序字符串
        if(str.equals(s))     &#x2F;&#x2F;比较字符串是否相等
        &#123;
            return true;
        &#125;else&#123;
            return false;
        &#125;
    &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>思路二(C语言）：</strong><br><em><strong>1、由回文数的特性可知，负数均不是回文数，故判断若x为负数直接输出false；<br>2、对于正数则用一个变量记录x的逆序数<br>3、比较两个数是否相等，相等则输出true；反之false<br>4、默认0为回文数</strong></em></p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//将x的逆序数定义为long类型，防止运行过程中因溢出而导致的错误</span>
    <span class="token keyword">int</span> y<span class="token operator">=</span>x<span class="token punctuation">;</span>       <span class="token comment">//记录原始x值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">//逆序x</span>
    <span class="token punctuation">&#123;</span>
        sum <span class="token operator">=</span> sum<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> sum <span class="token operator">==</span> y<span class="token punctuation">;</span> <span class="token comment">//返回bool值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><p>使用C语言实现回文数的过程中，由于将sum变量定义为int类型，导致在LeetCode运行时出现溢出错误，无法通过。后尝试将sum变量改为long类型，成功通过编译。<br>但在解题过程中，未考虑时间复杂度和空间复杂度。</p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode题解</tag>
        <tag>LeetCode</tag>
        <tag>回文数</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 安装Jdk</title>
    <url>/2023/0824b2d547.html</url>
    <content><![CDATA[<h1 id="查看centos7预装jdk"><a href="#查看centos7预装jdk" class="headerlink" title="查看centos7预装jdk"></a>查看centos7预装jdk</h1><p>使用命令查看<strong>centos7</strong>自带jdk版本<br><code>java -version</code><br>结果如图所示：</p>
<img data-src="/2023/0824b2d547/a4a87c81476d4e00a9472c789555305d.png" class>
<p>查看相关java文件，命令：<br><code>rpm -qa | grep java</code></p>
<img data-src="/2023/0824b2d547/5255707e36c64bf0b512d93ff50b0fbf.png" class>

<p>将上一步中的文件全部删除，需要注意自己的jdk版本，如果不是自己预期的jdk版本需要删除原先的版本再安装。<br>命令示例如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> java-1.8.0-openjdk-headless-1.8.0.242.b08-1.el7.x86_64
<span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>结果截图如下</p>
<img data-src="/2023/0824b2d547/b0e08b9062614d3b8a4ff9881d051856.png" class>

<h1 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlLWpkazgtZG93bmxvYWRzLmh0bWw=">点击下载jdk<i class="fa fa-external-link-alt"></i></span></p>
<img data-src="/2023/0824b2d547/60548a30d2734689aaa2ef228834c93c.png" class>
<p>下载完成后将jdk拖入<code>/usr/local/soft/jdk1.8</code>目录位置（注意：soft和jdk1.8是自己新建的文件夹)</p>
<h1 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h1><p>使用命令解压</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-8u361-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>解压结果如下所示：</p>
<img data-src="/2023/0824b2d547/bab0996885c84386a783deeb638adfb6.png" class>

<p>查看解压后的文件</p>
<img data-src="/2023/0824b2d547/f324f76c77754985b78d204bfdf9f856.png" class>

<p><em><strong>配置换环境变量</strong></em><br>使用命令<code>vim /etc/profile</code><br>进入文件后按键盘 i 键<br>然后设置环境变量，示例代码如下所示（<strong>注意自己的jdk解压位置</strong>）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#set jdk envirment </span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/soft/jdk1.8/jdk1.8.0_361
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/lib:<span class="token variable">$JRE_HOME</span>/lib:<span class="token variable">$CLASSPATH</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JRE_HOME</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>截图如下</p>
<img data-src="/2023/0824b2d547/111ea8fe20e54633a5ae492cffe0f48c.png" class>
<p>编写完成后，按<strong>ESC</strong>键之后，输入“<strong>：wq</strong>”结束并保存编辑</p>
<p>之后使用命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>更新配置结果如下</p>
<img data-src="/2023/0824b2d547/da7146db447b46d3afcf9f5848d1c8da.png" class>
]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS7</tag>
        <tag>jdk</tag>
        <tag>centos7安装jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Github学生包申请(学校邮箱版，秒通过)</title>
    <url>/2023/08ff1be8cc.html</url>
    <content><![CDATA[<h1 id="注册邮箱"><a href="#注册邮箱" class="headerlink" title="注册邮箱"></a>注册邮箱</h1><p>（1）若已拥有学校邮箱可直接看下一<br>（2）没有学校邮箱参考步骤去注册</p>
<blockquote>
<p>1、浏览器搜索“自己学校名字+邮件系统”<br>2、然后根据步骤自己注册</p>
</blockquote>
<h1 id="申请github学生包"><a href="#申请github学生包" class="headerlink" title="申请github学生包"></a>申请github学生包</h1><p>这里由于我已经有学校邮箱，并且有<strong>github</strong>账号，因此不在提供github的注册。有需要的可以参考这位朋友的文章，点击跳转<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDg3NTA4">github账号注册参考教程<i class="fa fa-external-link-alt"></i></span></p>
<p><em><strong>注意</strong></em>： <strong>如果是第一次申请的话，建议使用手机，因为需要手机拍照。</strong></p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9lZHVjYXRpb24uZ2l0aHViLmNvbS8=">github学生包申请地址<i class="fa fa-external-link-alt"></i></span><br>点击上面的申请地址即可跳转申请。</li>
<li>点击<code>Join Global Campus</code></li>
</ol>
<img data-src="/2023/08ff1be8cc/ae44f6bb89e1439eaf67ed565fe98679.png" class>

<ol start="3">
<li>点击<code>Sign up for...</code></li>
</ol>
  <img data-src="/2023/08ff1be8cc/30e7173bca9a4adbb5632051b9bd8c05.png" class>

<ol start="4">
<li>点击<code>get student benefits</code></li>
</ol>
  <img data-src="/2023/08ff1be8cc/9a6bd604087a48afbb3266fae033516e.png" class>

<ol start="5">
<li>点击<code>Add an email address</code></li>
</ol>
  <img data-src="/2023/08ff1be8cc/731cf4ba9377420dbedbbd3e0e5e3c36.png" class>


<ol start="6">
<li>点击蓝色字体 <code>add and verify your school-issued email address in your account settings</code></li>
</ol>
  <img data-src="/2023/08ff1be8cc/419068f3553b4e7192c75b36283ade8f.png" class>


<ol start="7">
<li><p>将学校邮箱填入<code>Add email address</code>下的框内，并点击<code>add</code><img data-src="/2023/08ff1be8cc/d5dd35b61e7a496c8a7058838691c6eb.png" class></p>
</li>
<li><p>添加后显示<code>Unverified,</code>需要进入学校邮箱验证邮箱<img data-src="/2023/08ff1be8cc/e18162846ca64316b05b7e42eecb3bee.png" class></p>
</li>
<li><p>点击<code>vertify your address</code></p>
</li>
</ol>
  <img data-src="/2023/08ff1be8cc/639b309e0a1a45eeb1cce8c9dfdb3d62.png" class>


<ol start="10">
<li><p>当新添加邮箱下显示如下所示，即添加成功<img data-src="/2023/08ff1be8cc/8b01d197b5ac4b81ace5d52b95640082.png" class></p>
</li>
<li><p>之后返回学生包申请界面并刷新，然后选择刚添加的学生邮箱。<img data-src="/2023/08ff1be8cc/27a758f1fdcf48a08c4d436e67673c12.png" class><br> 需要在<code>How do you plan to use GitHub</code>?下填入用途，可以参考如下模板：</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">I</span> am a student of （学校英文名）<span class="token punctuation">,</span> majoring in （专业英文名）<span class="token punctuation">.</span> 
<span class="token class-name">I</span> hope <span class="token keyword">to</span> <span class="token namespace">obtain</span> <span class="token class-name">Github</span> student <span class="token class-name"><span class="token namespace">certification<span class="token punctuation">.</span></span> 
I</span> want <span class="token keyword">to</span> <span class="token namespace">learn</span> more knowledge and use it on <span class="token class-name">Github<span class="token punctuation">.</span>
I</span> can also upload my code <span class="token keyword">to</span> <span class="token namespace">the</span> library <span class="token keyword">for</span> <span class="token class-name"><span class="token namespace">sharing<span class="token punctuation">.</span></span>
The</span> main purpose is <span class="token keyword">to</span> <span class="token namespace">learn</span> and use <span class="token keyword">this</span> student <span class="token class-name"><span class="token namespace">certification<span class="token punctuation">.</span></span> 
I</span> hope <span class="token class-name">Github</span> will give you <span class="token class-name"><span class="token namespace">certification<span class="token punctuation">.</span></span> Thank</span> you<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后点击<code>continue。</code></p>
<ol start="12">
<li>之后拍自己的学生证照片上传，证明类型选择第一个即可。<img data-src="/2023/08ff1be8cc/f9953f8eb11b40a7a92a475732f68a57.png" class><br>在这一步之后，本人是秒通过的。</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>github学生包</tag>
      </tags>
  </entry>
  <entry>
    <title>Git与Gitee和Github的简单使用</title>
    <url>/2023/086e30063e.html</url>
    <content><![CDATA[<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>Git安装包地址：链接: <span class="exturl" data-url="aHR0cDovL2dpdC1zY20uY29tL2Rvd25sb2Fkcw==">Git<i class="fa fa-external-link-alt"></i></span></p>
<p>Windows下载运行exe文件<br>安装之后可运行Git Bash</p>
<h2 id="配置个人信息"><a href="#配置个人信息" class="headerlink" title="配置个人信息"></a>配置个人信息</h2><p>–global默认全局配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"xxxx"</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email test@xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可使用以下命令查看配置信息</p>
<pre class="line-numbers language-none"><code class="language-none">$ git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="Github远程库"><a href="#Github远程库" class="headerlink" title="Github远程库"></a>Github远程库</h1><h2 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"youremail@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>引号中是你Github的使用的邮箱</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"youremail@example.com"</span>
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/Users/tianqixin/.ssh/id_rsa<span class="token punctuation">)</span>: 
Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:    <span class="token comment"># 直接回车</span>
Enter same passphrase again:                   <span class="token comment"># 直接回车</span>
Your identification has been saved <span class="token keyword">in</span> /Users/tianqixin/.ssh/id_rsa.
Your public key has been saved <span class="token keyword">in</span> /Users/tianqixin/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:MDKVidPTDXIQoJwoqUmI4LBAsg5XByBlrOEzkxrwARI youremail@example.com
The key's randomart image is:
+---<span class="token punctuation">[</span>RSA <span class="token number">3072</span><span class="token punctuation">]</span>----+
<span class="token operator">|</span>E*+.<span class="token operator">+=</span>**oo       <span class="token operator">|</span>
<span class="token operator">|</span>%Oo+oo<span class="token operator">=</span>o. <span class="token builtin class-name">.</span>      <span class="token operator">|</span>
<span class="token operator">|</span>%**.o.o.         <span class="token operator">|</span>
<span class="token operator">|</span>OO.  o o         <span class="token operator">|</span>
<span class="token operator">|</span>+o+     S        <span class="token operator">|</span>
<span class="token operator">|</span><span class="token builtin class-name">.</span>                <span class="token operator">|</span>
<span class="token operator">|</span>                 <span class="token operator">|</span>
<span class="token operator">|</span>                 <span class="token operator">|</span>
<span class="token operator">|</span>                 <span class="token operator">|</span>
+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 ~&#x2F; 下生成 .ssh 文件夹，进去，打开 id_rsa.pub，复制里面的 key</p>
<h2 id="Github添加SSH"><a href="#Github添加SSH" class="headerlink" title="Github添加SSH"></a>Github添加SSH</h2><p>浏览器打开Github，进入Settings，如下图所示</p>
<img data-src="/2023/086e30063e/3ec81d26de114d3b9a14e9cb34c5d429.png" class>
<p>点击SSH and GPG keys</p>
<img data-src="/2023/086e30063e/2c016870a0694e86a10bf337db3d3abc.png" class>
<p>点击new SSH key</p>
<img data-src="/2023/086e30063e/83dac484ff0e48fc85305caf612f29ae.png" class>
<p>将复制的SSH粘贴到key框内，即可添加成功。</p>
<p>添加成功后，在Git Bash中使用以下命令验证是否添加成功。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com
Hi xxxxx<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>并出现上面的提示即为添加成功。</p>
<h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>在Github上创建一个新的仓库</p>
<img data-src="/2023/086e30063e/82a3d16a09484c738c56dae00240043c.png" class>
<p>创建成功后得到如下结果</p>
<img data-src="/2023/086e30063e/0cd948836b094cd48499f8f44fdc3ee6.png" class>
<p>可根据提示选择在命令行创建一个仓库，或者将本地仓库推送到该远程仓库，可根据相应命令执行。</p>
<h2 id="将本地仓库推送到远程仓库"><a href="#将本地仓库推送到远程仓库" class="headerlink" title="将本地仓库推送到远程仓库"></a>将本地仓库推送到远程仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init                                  <span class="token comment"># 初始化</span>
$ <span class="token function">git</span> <span class="token function">add</span> README.md                         <span class="token comment"># 添加文件</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"添加 README.md 文件"</span>        <span class="token comment"># 提交并备注信息</span>
<span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> 0205aab<span class="token punctuation">]</span> 添加 README.md 文件
 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> README.md

<span class="token comment"># 提交到 Github</span>
$ <span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/username/Testrepo.git <span class="token comment">#注意该条命令需修改为自己仓库的地址</span>
$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Gitee远程仓库"><a href="#Gitee远程仓库" class="headerlink" title="Gitee远程仓库"></a>Gitee远程仓库</h1><p>由于Github不能稳定访问的缘故，转而换成Gitee作为托管平台，其连接形式过程与<br>github相似，推送时注意仓库链接地址。<br>这里说一下将推送到Gitee的仓库自动Push到Github中</p>
<p>（1）在你选择的仓库页面，点击管理，之后点击仓库镜像管理</p>
<img data-src="/2023/086e30063e/cbef69613efd4ab79554548aa9184fec.png" class>
<p>点击添加镜像，初次使用可能需要选择github授权，授权即可。</p>
<img data-src="/2023/086e30063e/3d6cff233c11400283ea4b3587b6cc03.png" class>
<p>之后选择是推送到github上还是从github上拉取，根据自己的需要选择，然后在镜像仓库中选择自己需要Push或者Pull的仓库</p>
<img data-src="/2023/086e30063e/295d8ed66d9f4f6ab6c628bf54e3d2c4.png" class>
<p><em><strong>私人令牌则是在github上手动设置的token复制粘贴到此处即可。</strong></em><br>创建token的步骤如下所示<em><strong>developer setting</strong></em></p>
<img data-src="/2023/086e30063e/adc4893757dd411e94f97138b0eeea11.png" class>
<p>根据图示选择<em><strong>generate new token</strong></em></p>
<img data-src="/2023/086e30063e/fd32362d80fe4943b2cf0e2a19c87c44.png" class>
<p>然后根据需要生成新的token，并复制使用。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Gitee</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础标签</title>
    <url>/2023/088c85f492.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>HTML教程</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>HTML教程</tag>
        <tag>html标签</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA配置注释模板</title>
    <url>/2023/089a2f66ac.html</url>
    <content><![CDATA[<h1 id="配置类注释模板"><a href="#配置类注释模板" class="headerlink" title="配置类注释模板"></a>配置类注释模板</h1><ol>
<li>打开IDEA，选择File-&gt;Setting,如下图所示：</li>
</ol>
<img data-src="/2023/089a2f66ac/image-20230805095019915.png" class>

<ol start="2">
<li>在Editor-&gt;File and Code Templates-&gt;includes,或者直接在搜索框搜索File，如下图所示。</li>
</ol>
<img data-src="/2023/089a2f66ac/image-20230805095349237.png" class>

<ol start="3">
<li>然后将下面内容粘贴到右侧框里</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
*@BelongsProject: $&#123;PROJECT_NAME&#125;
*@BelongsPackage: $&#123;PACKAGE_NAME&#125;
*@Author: $&#123;USER&#125;
*@CreateTime: $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;  $&#123;HOUR&#125;:$&#123;MINUTE&#125;
*@Description: TODO
*@Version: 1.0
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如下图所示：</p>
<img data-src="/2023/089a2f66ac/image-20230805095849891.png" class>

<ol start="4">
<li>配置好的效果图如下所示：</li>
</ol>
<img data-src="/2023/089a2f66ac/image-20230805100226352.png" class>

<h1 id="配置方法注释模板"><a href="#配置方法注释模板" class="headerlink" title="配置方法注释模板"></a>配置方法注释模板</h1><ol>
<li>同样是在Setting中，选择Live Templates，点击右侧+号，选择Template group,如下图所示：</li>
</ol>
<img data-src="/2023/089a2f66ac/image-20230805100447973.png" class>

<ol start="2">
<li>输入Group名字（自己起），如下所示：</li>
</ol>
<img data-src="/2023/089a2f66ac/image-20230805101002134.png" class>

<ol start="3">
<li>然后找到自己新建的group,选中，然后点击+号，选择Live Template，根据如下所示图片进行操作。</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> 
 <span class="token operator">*</span> <span class="token annotation punctuation">@description</span><span class="token operator">:</span> $description$
$params$$<span class="token keyword">return</span>$ 
 <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> $<span class="token constant">USER</span>$
 <span class="token operator">*</span> <span class="token annotation punctuation">@date</span> $date$ $time$
 <span class="token operator">*</span><span class="token operator">/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将上面内容粘贴在下图所示位置。</p>
<img data-src="/2023/089a2f66ac/image-20230805101756237.png" class>

<ol start="4">
<li>上述步骤完成后，点击Edit Variables按钮，显示具体参数如下所示：</li>
</ol>
<img data-src="/2023/089a2f66ac/image-20230805102122256.png" class>

<p>上面参数的表达式照我上面的配置即可</p>
<ul>
<li>params的表达式如下</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">"def result=''; def params=\"$&#123;_1&#125;\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=' * @param ' + params[i] + ((i &lt; params.size() - 1) ? '\\n' : '')&#125;; return result"</span><span class="token punctuation">,</span> <span class="token function">methodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>return的表达式如下</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">"return \"$&#123;_1&#125;\" == 'void' ? null : '\\r\\n * @return: ' + \"$&#123;_1&#125;\""</span><span class="token punctuation">,</span> <span class="token function">methodReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>注意这里的return返回的类型会有包名</strong>，如下所示：</p>
<img data-src="/2023/089a2f66ac/image-20230805102543264.png" class>

<p>如果不想要包名，直接输入：<code>methodReturnType()</code>即可。</p>
]]></content>
      <categories>
        <category>软件合集</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>idea</tag>
        <tag>IDEA配置注释</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaBean</title>
    <url>/2023/083310.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>JavaBean是Java编程中的一个概念，它是一种符合特定规范的Java类。JavaBean通常用于封装数据和功能，通过提供公共的getter和setter方法来访问和修改类的属性（成员变量），从而实现面向对象编程的封装特性。</p>
<h1 id="特点和规范"><a href="#特点和规范" class="headerlink" title="特点和规范"></a>特点和规范</h1><p>JavaBean的特点和规范如下：</p>
<ol>
<li>属性（Properties）：JavaBean类通常包含一些私有的成员变量（属性），这些成员变量用于存储对象的数据。</li>
<li>公共的getter和setter方法：JavaBean类为每个属性提供公共的getter方法用于获取属性值，以及setter方法用于设置属性值。这样做的好处是可以对属性进行封装，保护属性的访问和修改，同时可以实现类的数据封装。</li>
<li>无参构造函数：JavaBean类必须提供一个无参的构造函数，以便在实例化对象时使用。</li>
<li>实现Serializable接口（可选）：如果需要对JavaBean对象进行序列化和反序列化（如保存到文件或传输到网络），则可以实现Serializable接口。</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>下面是一个简单的JavaBean类的示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>
                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>
                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用JavaBean示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Alice"</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 30</span>

        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Person&#123;name='Alice', age=31&#125;"</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上面的示例中，<code>Person</code>类符合JavaBean规范，它封装了两个属性<code>name</code>和<code>age</code>，并提供了公共的getter和setter方法。我们可以通过getter和setter方法获取和设置对象的属性值。JavaBean的这种封装特性使得对象的使用更加简单和安全。</p>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaBean</tag>
        <tag>Java核心类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java常用工具类</title>
    <url>/2023/088b50b566.html</url>
    <content><![CDATA[<h1 id="常用工具类"><a href="#常用工具类" class="headerlink" title="常用工具类"></a>常用工具类</h1><p>Java中有许多常用的工具类，它们提供了各种实用的方法，方便我们进行常见的操作。以下是一些常用的Java工具类：</p>
<ol>
<li><code>java.util.Arrays</code>：提供了用于操作数组的静态方法，如排序、搜索、填充等。</li>
<li><code>java.util.Collections</code>：提供了用于操作集合的静态方法，如排序、搜索、反转、替换等。</li>
<li><code>java.lang.Math</code>：提供了用于数学运算的静态方法，如求绝对值、平方根、最大值、最小值等。</li>
<li><code>java.util.StringJoiner</code>：用于连接字符串的类，可以在字符串之间添加分隔符。</li>
<li><code>java.util.StringTokenizer</code>：用于分割字符串的类，类似于<code>String.split()</code>方法，但更加灵活。</li>
<li><code>java.util.Random</code>：用于生成随机数的类。</li>
<li><code>java.text.SimpleDateFormat</code>：用于将日期对象格式化为指定的日期字符串。</li>
<li><code>java.util.Properties</code>：用于处理属性文件的类，可以读取和写入属性文件。</li>
<li><code>java.util.Scanner</code>：用于从输入流中读取基本类型和字符串。</li>
<li><code>java.nio.file.Paths</code>：用于处理文件路径的类，可以获取文件路径、创建文件路径等。</li>
<li><code>java.nio.file.Files</code>：用于处理文件和目录的类，可以复制、移动、删除文件等。</li>
<li><code>java.util.UUID</code>：用于生成唯一标识符(UUID)。</li>
<li><code>java.util.regex.Pattern</code>：用于处理正则表达式的类，可以进行匹配和查找。</li>
<li><code>java.net.URL</code>：用于表示统一资源定位符(URL)，可以用于网络资源访问。</li>
<li><code>java.util.zip.ZipFile</code>：用于处理ZIP文件的类，可以读取和解压ZIP文件。</li>
</ol>
<p>这些工具类都位于Java标准库中，无需额外导入即可使用。根据不同的需求，你可以选择合适的工具类来简化你的编程工作。除了上述工具类，Java还有许多其他常用的工具类，可以根据具体的项目和任务来进一步探索和使用。</p>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java工具类</tag>
        <tag>Java常用工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2023/08f7ede91d.html</url>
    <content><![CDATA[<h2 id="1、java环境安装"><a href="#1、java环境安装" class="headerlink" title="1、java环境安装"></a>1、java环境安装</h2><ul>
<li>jdk8安装：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkxNTY0Ny9hcnRpY2xlL2RldGFpbHMvMTMxMDM4NzkzP3NwbT0xMDAxLjIwMTQuMzAwMS41NTAx">点击跳转查看安装教程<i class="fa fa-external-link-alt"></i></span></li>
<li>安装eclipse：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ0NTg2L2FydGljbGUvZGV0YWlscy8xMjM5NDI2ODU=">点击跳转<i class="fa fa-external-link-alt"></i></span></li>
<li>idea：教程网上搜吧，一堆</li>
</ul>
<h2 id="2、记事本"><a href="#2、记事本" class="headerlink" title="2、记事本"></a>2、记事本</h2><p>记事本运行java文件</p>
<ul>
<li>使用记事本新建文件，编写java程序</li>
<li>将后缀名改为.java</li>
<li>在命令提示符进入java文件所在位置</li>
<li>然后使用命令javac chengxu.java编译</li>
<li>使用命令java chengxu 运行</li>
</ul>
<h2 id="3、idea"><a href="#3、idea" class="headerlink" title="3、idea"></a>3、idea</h2><p>编写简单输出语句，熟悉ide用法，idea是真的好用哦</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java教程</tag>
        <tag>java知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常处理</title>
    <url>/2023/087526d370.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java异常处理是Java编程中一个重要的概念，用于处理程序运行过程中可能出现的错误和异常情况。异常处理机制可以使程序在出现异常时不至于崩溃，而是能够进行适当的处理和恢复。Java内置了一套异常处理机制，总是使用异常来表示错误。异常可以在任何地方抛出。</p>
<h1 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h1><p>凡是可能抛出异常的语句，都可以用<code>try ... catch</code>捕获。</p>
<ul>
<li>捕获异常使用<code>try...catch</code>语句，把可能发生异常的代码放到<code>try &#123;...&#125;</code>中，然后使用<code>catch</code>捕获对应的<code>Exception</code>及其子类，可以使用多个<code>catch</code>块捕获不同类型的异常，从而实现不同的处理逻辑，JVM在捕获到异常后，会从上到下匹配<code>catch</code>语句，匹配到某个<code>catch</code>后，执行<code>catch</code>代码块，然后<em>不再</em>继续匹配，也就是说多个<code>catch</code>语句只有一个能被执行。</li>
<li><code>finally</code>块用于放置无论是否发生异常都需要执行的代码。通常用于释放资源或清理操作。</li>
<li><code>finally</code>语句不是必须的，可写可不写，<code>finally</code>总是最后执行。</li>
</ul>
<h1 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h1><ul>
<li>使用<code>throw</code>关键字可以手动抛出异常。通常在代码中检测到某种错误或不合理情况时，可以抛出异常来中断程序执行。</li>
</ul>
<h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><ul>
<li>可以通过继承<code>Exception</code>或其子类来自定义异常。自定义异常类可以包含自己的字段和方法，用于提供更详细的异常信息。</li>
</ul>
<h1 id="异常处理原则"><a href="#异常处理原则" class="headerlink" title="异常处理原则"></a>异常处理原则</h1><p>异常处理的原则：</p>
<ul>
<li>不要滥用异常，避免在正常流程中使用异常处理。</li>
<li>异常应该在异常情况下使用，而不是用于正常控制流程。</li>
<li>适当处理异常，进行恰当的日志记录、资源释放等操作。</li>
<li>在捕获异常后，要进行适当的处理，不要忽略异常。</li>
</ul>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java异常处理</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java标识符和基本数据类型</title>
    <url>/2023/084addbb94.html</url>
    <content><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul>
<li><p>组成：字母、数字、下划线</p>
</li>
<li><p>关键字：48个</p>
</li>
<li><p>驼峰命名：若变量由多个单词组成，第一个单词首字母小写，其他单词首字母大写</p>
</li>
</ul>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>分为基本数据类型和应用数据类型。</p>
<ul>
<li><p>八大基本数据类型：</p>
<ul>
<li>byte：1字节</li>
<li>char：2</li>
<li>short：2</li>
<li>int：4</li>
<li>long：8</li>
<li>float：4</li>
<li>double：8</li>
<li>boolean：1,    true,false</li>
</ul>
</li>
<li><p>数据存储</p>
<ul>
<li>永久存储：MySQL、sqlserver，oracle，nosql等</li>
<li>瞬时存储：中间数据，程序结束后空间回收</li>
</ul>
</li>
<li><p>常量：</p>
<ul>
<li>使用final定义</li>
<li>命名规则：字母全大写</li>
</ul>
</li>
<li><p>变量：</p>
<ul>
<li>定义：根据数据类型进行定义</li>
<li>命名：驼峰规范</li>
<li>使用步骤<ul>
<li>声明变量：声明相应数据类型的变量，int a;   (一般声明和初始化同时进行，int a &#x3D; 0;)</li>
<li>初始化：使用&#x3D;赋值，为变量名指向的地址空间存入数据 a&#x3D;0;</li>
<li>使用：在代码中通过变量名操作数据  System.out.println(a);   —0</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> score <span class="token operator">=</span> <span class="token number">98.5f</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> course <span class="token operator">=</span> <span class="token string">"Java课"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> sex <span class="token operator">=</span> <span class="token char">'男'</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>course<span class="token operator">+</span><span class="token string">"最高成绩是："</span><span class="token operator">+</span>score<span class="token operator">+</span><span class="token string">"\n最高分学员姓名："</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"\n最高分学员性别："</span><span class="token operator">+</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>类型转换</p>
<ul>
<li>强制类型转换：使用（）进行强制类型转换，会产生精度损失</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">99</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>*out<span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//   c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<ul>
<li>自动类型转换：自下向上转换</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>*out<span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//97</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>BigDecimal:用以计算过程中精度要求高，不能随意截断的数据，eg：money</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java教程</tag>
        <tag>java知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Java字符串</title>
    <url>/2023/07689.html</url>
    <content><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串知识点"><a href="#字符串知识点" class="headerlink" title="字符串知识点"></a>字符串知识点</h3><ol>
<li><p>String是一个引用类型，本身也是一个<code>class</code>。</p>
</li>
<li><p>字符串在String内部是以字符数组char[]表示的</p>
</li>
<li><p>写法1：<code>String s=&quot;xiaozhang&quot;;</code></p>
</li>
<li><p>写法2：<code>String s= new String(new char[] &#123;&#39;c&#39;,&#39;z&#39;&#125;);</code></p>
</li>
<li><p>Java字符串的特点：字符串不可变。因为其内部的<code>private final char[],</code>以及没有提供修改的方法。</p>
</li>
<li><p>平时所使用的修改字符串是引用的改变,当创建一个新的字符串时，编译器会先检查在常量池中是否已存在该字符串，若存在则直接使用该字符串的使用；不存在则直接新建一个。</p>
</li>
<li><p>由于字符串的不可变，因此对字符串的改变是创建一个新字符串或者是改变引用。</p>
</li>
<li><p>对于字符串的比较，需要使用**equals()**方法，切记不要使&#x3D;&#x3D;，因为对于引用类型的变量使用&#x3D;&#x3D;进行比较，比较的是对象的引用。当使用&#x3D;&#x3D;运算符比较两个字符串时，它会检查两个字符串对象的引用是否指向相同的内存地址，而不会比较它们的内容。这意味着即使两个字符串的内容相同，它们可能并不指向相同的内存地址，因此使用<code>==</code>运算符进行比较会得到错误的结果。</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token string">"HELLO"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于上面的代码，使用&#x3D;&#x3D;比较两个字符串会输出false，虽然两个字符串内容一样，但由于两个变量的引用不同，所以两个变量是不相等的。</p>
<h3 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h3><ol>
<li><p>equals()：判断字符串是否相等</p>
</li>
<li><p>equalsIgnoreCase()：忽略大小写比较字符串</p>
</li>
<li><p>contains(str)：判断字符串是否具有str子串，例如<code>&quot;Hello&quot;.contains(&quot;ll&quot;); // true</code></p>
</li>
<li><p>indexOf(i)：根据字符串索引位置获取字符，<code>eg：&quot;Hello&quot;.indexOf(&quot;l&quot;); // 2</code></p>
</li>
<li><p>lastIndexOf(ch)：获取字符串中字符ch最后一次出现的索引位置，<code>eg:&quot;Hello&quot;.lastIndexOf(&quot;l&quot;); // 3</code></p>
</li>
<li><p>startsWith(str)：判断字符串是否以字串str开头，<code>eg:&quot;Hello&quot;.startsWith(&quot;He&quot;); // true</code></p>
</li>
<li><p>endsWith(str)：判断字符串是否以字串str结尾，<code>eg:&quot;Hello&quot;.endsWith(&quot;lo&quot;); // true</code></p>
</li>
<li><p>substring(): 根据索引位置进行提取字串，索引从0开始。如果只有一个参数，则从该位置截取字符串，获取后半部分；如果有两个参数，则截取两个位置间的字串，包括两个位置。</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">eg<span class="token operator">:</span>
<span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "llo"</span>
<span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"ll"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<ol start="9">
<li><p>trim()：去除字符串首尾两端的空格，trim(): 仅去除字符串首尾的空格字符（ASCII码为32的字符）</p>
</li>
<li><p>strip()：去除字符串首尾两端的空格，包括中文的空格字符，包括空格、制表符、换行符等 Unicode 空白字符</p>
</li>
<li><p>isEmpty()：判断字符串是否为空</p>
</li>
<li><p>isBlank():判断字符串是否是空格组成的字符串</p>
</li>
<li><p>replace(s1，s2):替换字符串，将字符串中的s1全部替换为s2 ，<code>“hello”.replace(&#39;l&#39;, &#39;w&#39;); // &quot;hewwo&quot;，所有字符&#39;l&#39;被替换为&#39;w&#39;</code></p>
</li>
<li><p>replaceAll(regex,replacement):使用正则表达式替换字符串，regex为正则表达式，将符合正则表达式的字符串替换为replacement字符串</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"A,,B;C ,D"</span><span class="token punctuation">;</span><span class="token comment">//将一个或连续多个， ；或者空白字符替换为，</span>
s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[\\,\\;\\s]+"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "A,B,C,D"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="15">
<li>split(ch):根据ch将字符串分割为字符串数组</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"A,B,C,D"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;"A", "B", "C", "D"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="16">
<li>join():拼接字符串,将多个字符串按照指定的分隔符连接成一个单一的字符串</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"***"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "A***B***C"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>另外可以使用加号+来拼接字符串</p>
<ol start="17">
<li>format()和formatted():用于用参数替换字符串中的占位符，两者作用相同，用法不同</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hi %s, your look so %s!"</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token string">"xiaozhang"</span><span class="token punctuation">,</span> <span class="token string">"handsome"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hi %s, your are  %d! years old"</span><span class="token punctuation">,</span> <span class="token string">"xiaozhang"</span><span class="token punctuation">,</span><span class="token number">88</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>以下是几个常用的占位符：</p>
<ul>
<li><code>%s</code>：显示字符串；</li>
<li><code>%d</code>：显示整数；</li>
<li><code>%x</code>：显示十六进制整数；</li>
<li><code>%f</code>：显示浮点数。</li>
</ul>
<ol start="18">
<li>valueOf(): 将其他类型的变量转为字符串</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "123"</span>
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">12.344</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "45.67"</span>
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="19">
<li>toCharArray():将字符串转为字符数组，也可将字符数组转为字符串，示例如下：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String -> char[]</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char[] -> String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>结果如下所示：</p>
<img data-src="/2023/07689/image-20230731152042611.png" class>	
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java核心类</tag>
        <tag>字符串</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Java运算符</title>
    <url>/2023/08778179f.html</url>
    <content><![CDATA[<p>#运算符</p>
<p><strong>使用过程中，注意数据类型（会不会产生数据类型转换）</strong></p>
<ul>
<li>‘+’</li>
<li>‘-’</li>
<li>‘*’</li>
<li>‘&#x2F;’</li>
<li>‘%’: 模运算，求余数</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo03 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input a four number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> d <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"四位数："</span><span class="token operator">+</span><span class="token string">"千位："</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"百位："</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"十位"</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">"个位"</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span>d <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经检测，您为优质用户，恭喜您中奖了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好运擦肩而过~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>&#x3D;</p>
</li>
<li><p>&#x3D;&#x3D;</p>
<ul>
<li>对于基本数据类型，可以使用&#x3D;&#x3D;进行比较</li>
<li>对于引用类型则不可以，eg：对于String，需要使用equals()方法。</li>
<li>对于数组和引用类型，创建时会有两块地址，一是存放实际数据，另一个是实际数据存放的地址，而使用&#x3D;&#x3D;比较的是地址，equals比较的是数据内容。</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo04 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1==str2结果："</span><span class="token operator">+</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1==str2结果："</span><span class="token operator">+</span>str1<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1==str2结果："</span><span class="token operator">+</span>str2<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1==str2结果："</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img data-src="/2023/08778179f/image-20230804101218630.png" class>
</li>
<li><p>&amp;&amp;：全为true，从前到后，有一个条件成立就不再继续判断</p>
</li>
<li><p>||：有一个成立就不再判断</p>
</li>
<li><p>&amp;：不管是否全为true，都会全部判断</p>
</li>
<li><p>|：都会全部判断</p>
</li>
<li><p>^：异或，相同为0，不同为1</p>
</li>
<li><p>~：按位取反</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span> <span class="token punctuation">,</span>b<span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> c<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">&amp;&amp;</span> b<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">&amp;</span> b<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">||</span> c<span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">|</span> c<span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">|</span> c<span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">^</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">^</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">^</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p>‘&gt;&gt;’:有符号右移，高位补符号位，低位丢弃</p>
</li>
<li><p>‘&lt;&lt;’:左移操作，将数据转换成二进制后，向左移若干位，高位丢弃，低位补零</p>
</li>
<li><p>‘&gt;&gt;&gt;’：无符号右移高位补零，低位丢弃</p>
</li>
<li><p>express1    ？express2 : express3 条件表达式，当express1成立时，使用express2，反之使用express3</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">></span><span class="token number">2</span> <span class="token operator">?</span> yes <span class="token operator">:</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// no</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">?</span> yes <span class="token operator">:</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>







<h1 id="自增运算"><a href="#自增运算" class="headerlink" title="自增运算"></a>自增运算</h1><ul>
<li>自增：++<ul>
<li>a++: 先使用a的值，然后再做自增运算</li>
<li>++a:先自增，然后再使用a的值</li>
</ul>
</li>
<li>自减：–<ul>
<li>a–:先使用a的值，然后再做自减运算</li>
<li>–a:先自减，然后再使用a的值</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo01 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">int</span> a<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
         <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">--</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>#运算符优先级</p>
<img data-src="/2023/08778179f/image-20230804132459473.png" class>







<p>**<br> * @description: TODO<br> * @author $user$<br> * @date $date$ $time$<br> * @version 1.0<br> *&#x2F;</p>
<p>&#x2F;**</p>
<ul>
<li>@author ${USER}</li>
<li>@date ${DATE} ${TIME}</li>
<li>@version 1.0</li>
<li>@description: TODO<br> *&#x2F;</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java教程</tag>
        <tag>java知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Java选择结构</title>
    <url>/2023/084a23ab17.html</url>
    <content><![CDATA[<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ul>
<li>对于if结构内需要多条语句时，注意添加{}</li>
<li>单条语句也建议加上{}</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>express<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太棒了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>express<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太棒了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太差了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if-else if-else"></a>if-else if-else</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>express1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太棒了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>express2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还行吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太差了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="小练习（判断闰年、平年）"><a href="#小练习（判断闰年、平年）" class="headerlink" title="小练习（判断闰年、平年）"></a>小练习（判断闰年、平年）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"please input a year:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> year <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token string">" 是闰年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token string">"  是平年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a>嵌套if</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入百米成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜，进入决赛！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入性别:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> sex <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您已进入男子组决赛！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您已进入女子组决赛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的信息有误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抱歉，您无缘决赛，下次见哦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入今天是周几："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> week <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>week<span class="token operator">>=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> week <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> week <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期"</span><span class="token operator">+</span>week<span class="token operator">+</span><span class="token string">",可以出去happy一下啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入今天气温："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">float</span> temp <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">>=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今日气温 ："</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">" ,今天天气适合游泳哦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今日气温 ："</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">", 今天天气适合爬山哦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天星期 "</span><span class="token operator">+</span>week<span class="token operator">+</span><span class="token string">", 是工作日哦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入今天天气（好？差："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> tianQi <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>tianQi<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这么好的天气，去谈业务吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天气不好，就如你今天的心情，老实上班吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个星期只有七天呐~ 小迷糊~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>注意：</strong>对于多分支if-else语句，需要注意条件的顺序，顺序不合理，会出现错误结果</p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ul>
<li>处理等值条件判断的情况</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//switch结构</span>
       <span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
           <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
           <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
           <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
           <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
           <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励擦肩而过，继续加油吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
           <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
           <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
           <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一本参考书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
           <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一个MP4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
           <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爸爸奖励一辆车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
           <span class="token keyword">default</span><span class="token operator">:</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="枚举类Enum"><a href="#枚举类Enum" class="headerlink" title="枚举类Enum"></a>枚举类Enum</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>
    <span class="token constant">MONDAY</span><span class="token punctuation">,</span><span class="token constant">SUNDAY</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java教程</tag>
        <tag>java知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Java选择结构小练习</title>
    <url>/2023/088f908750.html</url>
    <content><![CDATA[<h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>用户输入消费金额，然后选择换购产品，根据输入计算消费总额，并输出结果，综合使用<code>if</code>和<code>switch</code>实现，具体要求如下所示：</p>
<img data-src="/2023/088f908750/image-20230805142407431.png" class>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入消费金额："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> money <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否参加优惠换购活动："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1:满50元，加2元换购百事可乐饮料1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2:满100元，加3元换购500ml可乐1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3:满100元，加10元换购5公斤面粉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4:满200元，加10元换购1个苏泊尔炒菜锅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5:满200元，加20元换购欧莱雅爽肤水1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0:不换购"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请选择:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> op <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：百事可乐饮料1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：500ml可乐1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：5公斤面粉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：1个苏泊尔炒菜锅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：欧莱雅爽肤水1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入成绩，根据成绩区间显示奖励，奖励区间如下所示：</p>
<ul>
<li>&lt;60: 无奖励</li>
<li>‘&gt;&#x3D;’60 &amp;&amp; &lt;90:奖励习题册</li>
<li>‘&gt;&#x3D;’90 &amp;&amp; &lt;100 : 奖励MP4</li>
<li>100：奖励一辆车（玩具哦）</li>
</ul>
<p>如下图所示：</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li><code>if</code>实现</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入小赵的考试成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//if结构</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爸爸奖励一辆车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一个MP4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一本参考书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励擦肩而过，继续加油吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>switch</code>实现</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//switch结构</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励擦肩而过，继续加油吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一本参考书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一个MP4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爸爸奖励一辆车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入三个数，使用if进行排序后输出</p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第一个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第二个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第三个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
            a <span class="token operator">=</span> b<span class="token punctuation">;</span>
            b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">></span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            temp <span class="token operator">=</span> b<span class="token punctuation">;</span>
            b <span class="token operator">=</span> c<span class="token punctuation">;</span>
            c <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
            a <span class="token operator">=</span> b<span class="token punctuation">;</span>
            b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三个数从小到大为："</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入三个数，判断是否能构成三角形，若能，进而判断是否是等边、直角、等腰还是普通三角形，并输出结果</p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第一个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第二个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第三个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b <span class="token operator">&lt;</span> c <span class="token operator">||</span> a<span class="token operator">+</span>c <span class="token operator">&lt;</span>b <span class="token operator">||</span> b<span class="token operator">+</span>c <span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能组成三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b <span class="token operator">&amp;&amp;</span>  b<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是等边三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a <span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">==</span>c<span class="token operator">*</span>c <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a <span class="token operator">+</span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token operator">==</span>b<span class="token operator">*</span>b <span class="token operator">||</span> <span class="token punctuation">(</span>c<span class="token operator">*</span>c <span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">==</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是直角三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> a<span class="token operator">==</span>b <span class="token operator">||</span> b<span class="token operator">==</span>c <span class="token operator">||</span> a<span class="token operator">==</span>c  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是等腰三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是普通三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入月份，判断季节</p>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no05</span><span class="token punctuation">(</span><span class="token class-name">Scanner</span> sc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入月份："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> month <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java练习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java教程</tag>
        <tag>java知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据类型</title>
    <url>/2023/0818833.html</url>
    <content><![CDATA[<h1 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul>
<li>基本类型：<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>boolean</code>，<code>float</code>，<code>double</code>，<code>char</code></li>
<li>引用类型：所有<code>class</code>和<code>interface</code>类型</li>
</ul>
<p><strong>注意</strong>：引用类型可以赋值为null，表示空，但基本类型不能赋值为null，会编译错误</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// compile error!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>基本类型与引用类型的对应关系，如下表所示：</p>
<table>
<thead>
<tr>
<th align="left">基本类型</th>
<th align="left">对应的引用类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean</td>
<td align="left">java.lang.Boolean</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">java.lang.Byte</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">java.lang.Short</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">java.lang.Integer</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">java.lang.Long</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">java.lang.Float</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">java.lang.Double</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">java.lang.Character</td>
</tr>
</tbody></table>
<ul>
<li>Java编译器可以帮助我们自动在<code>int</code>和<code>Integer</code>之间转型：</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 编译器自动使用Integer.valueOf(int)</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// 编译器自动使用Integer.intValue()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>注意：</strong>这种直接把<code>int</code>变为<code>Integer</code>的赋值写法，称为自动装箱（Auto Boxing），反过来，把<code>Integer</code>变为<code>int</code>的赋值写法，称为自动拆箱（Auto Unboxing）。自动装箱和自动拆箱只发生在编译阶段，目的是为了少写代码。</p>
<p>装箱和拆箱会影响代码的执行效率，因为编译后的<code>class</code>代码是严格区分基本类型和引用类型的。并且，自动拆箱执行时可能会报<code>NullPointerException</code>：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment">//基本数据类型不能</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>所有的包装类型都是不变类。</p>
</li>
<li><p>对两个<code>Integer</code>实例进行比较要特别注意：绝对不能用<code>==</code>比较，因为<code>Integer</code>是引用类型，必须使用<code>equals()</code>比较</p>
</li>
<li><p>在Java中，并没有无符号整型（Unsigned）的基本数据类型。<code>byte</code>、<code>short</code>、<code>int</code>和<code>long</code>都是带符号整型，最高位是符号位。无符号整型和有符号整型的转换在Java中就需要借助包装类型的静态方法完成。</p>
</li>
<li><p>char的加减运算就是按其Unicode编号进行运算，一般对字符做加减运算没什么意义，但ASCII码字符是有意义的。比如大小写转换，大写A～Z的编号是65～90，小写a～z的编号是97～122，正好相差32，所以大写转小写只需加32，而小写转大写只需减32。加减运算的另一个应用是加密和解密，将字符进行某种可逆的数学运算可以做加解密。</p>
</li>
<li><p>char的位运算可以看作是对应整数的位运算，只是它是无符号数，也就是说，有符号右移&gt;&gt;和无符号右移&gt;&gt;&gt;的结果是一样的。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java零碎知识点记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java知识记录</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/2023/082da0528d.html</url>
    <content><![CDATA[<h1 id="KMP算法简介"><a href="#KMP算法简介" class="headerlink" title="KMP算法简介"></a>KMP算法简介</h1><ul>
<li><p><code>KMP</code>（Knuth-Morris-Pratt）算法是一种用于在一个文本串<code>S</code>中查找一个模式串P出现位置的字符串匹配算法。它的时间复杂度为<code>O(N+M)</code>，其中N是文本串的长度，M是模式串的长度。相比传统的字符串匹配算法（如朴素的暴力匹配算法），KMP算法具有更高的效率。</p>
</li>
<li><p>KMP算法的核心思想是<strong>利用已经匹配过的信息，避免不必要的回溯，从而减少匹配的次数</strong>。具体来说，它在匹配过程中维护一个<strong>部分匹配表（Partial Match Table）</strong>，用于指导下一步的匹配位置。<strong>部分匹配表记录了模式串中前缀和后缀的最长相等长度</strong>，这样可以根据部分匹配表的信息在匹配过程中跳过一些不可能匹配的位置，从而加快匹配的速度。</p>
</li>
<li><p>直白的说，kmp就是在一个字符串中查找字串所在的位置，只不过它通过查找字串的前后缀来移动，减少匹配次数</p>
</li>
</ul>
<h1 id="KMP算法步骤"><a href="#KMP算法步骤" class="headerlink" title="KMP算法步骤"></a>KMP算法步骤</h1><p>以下是KMP算法的实现步骤：</p>
<ol>
<li>构建部分匹配表（Partial Match Table）：对于模式串P，计算以每个位置结尾的子串的最长相等前缀后缀的长度。</li>
<li>进行匹配：在文本串S中从左到右遍历，同时在模式串P中根据部分匹配表进行跳跃匹配。</li>
</ol>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>下面给出KMP算法的Java代码示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KMPAlgorithm</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 构建部分匹配表</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildPartialMatchTable</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                j <span class="token operator">=</span> table<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> table<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// KMP算法匹配</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kmpMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token function">buildPartialMatchTable</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                j <span class="token operator">=</span> table<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 匹配成功，返回模式串在文本串中的起始位置</span>
                <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 匹配失败，返回-1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"ABABABABCABABABABCABABABABC"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token string">"ABABC"</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token function">kmpMatch</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pattern found at index: "</span> <span class="token operator">+</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pattern not found in the text."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个示例中，我们用<code>kmpMatch</code>方法进行文本串和模式串的匹配，并返回模式串在文本串中的起始位置。如果找不到匹配，则返回-1。</p>
<p>注意：KMP算法的关键是构建部分匹配表，它影响了匹配的效率。在实际应用中，如果需要多次对相同的模式串进行匹配，最好预先计算并保存部分匹配表，然后进行多次匹配。这样可以避免重复计算，提高效率。</p>
]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>算法学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2023/08d0edc1ed.html</url>
    <content><![CDATA[<h1 id="解压命令"><a href="#解压命令" class="headerlink" title="解压命令"></a>解压命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#gz文件</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span>
<span class="token comment">#xz文件</span>
<span class="token function">tar</span> <span class="token parameter variable">-Jxvf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建文件夹</span>
<span class="token function">mkdir</span> 文件夹名
<span class="token comment">#文件权限 r（读） w(写） x(执行)</span>
<span class="token function">chmod</span> +x script
<span class="token comment">#打开文件</span>
<span class="token builtin class-name">cd</span> 文件名
<span class="token comment"># 返回上一级</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token comment">#返回上一个目录</span>
<span class="token builtin class-name">cd</span> -

<span class="token comment">#复制 文件夹后加/</span>
<span class="token function">cp</span> 文件1.txt wenjain.txt
<span class="token comment">#重命名或移动</span>
<span class="token function">mv</span> 原名 现名  <span class="token comment">#保留在同一目录</span>
<span class="token function">mv</span> source_file destination_folder/ <span class="token comment">#移动</span>
<span class="token comment">#删除文件，-rf不询问 -r询问</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> 文件名

<span class="token comment">#编辑文件</span>
<span class="token function">vim</span> 文件名
<span class="token comment">#编辑后保存文件</span>
ECS + ：wq

加！强制退出

<span class="token comment">#列出目录下neirong</span>
<span class="token function">ls</span>

<span class="token comment">#输出当前目录的绝对路径</span>
<span class="token builtin class-name">pwd</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="jdk相关"><a href="#jdk相关" class="headerlink" title="jdk相关"></a>jdk相关</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#java版本</span>
<span class="token function">java</span> <span class="token parameter variable">-version</span>
<span class="token comment">#显示java文件</span>
<span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span>
<span class="token comment">#删除</span>
<span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> 文件名
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#wget</span>
<span class="token function">wget</span> 资源地址
<span class="token comment">#yum </span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="ip相关"><a href="#ip相关" class="headerlink" title="ip相关"></a>ip相关</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看ip</span>
<span class="token function">ip</span> addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>linux</tag>
        <tag>linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis简介</title>
    <url>/2023/083f7f462b.html</url>
    <content><![CDATA[<h1 id="简介及总结"><a href="#简介及总结" class="headerlink" title="简介及总结"></a>简介及总结</h1><p><code>MyBatis</code> 是一款开源的 <code>Java</code> 持久层框架，可以帮助 <code>Java</code> 开发者简化数据库访问的流程。以下是一些 <code>MyBatis</code> 的知识总结：</p>
<ul>
<li><p><strong>SQL 映射文件</strong>：</p>
<blockquote>
<p><code>MyBatis</code> 通过 <code>SQL</code> 映射文件来定义 <code>SQL</code> 语句和 <code>Java</code> 对象之间的映射关系。<code>SQL</code> 映射文件通常包括数据查询、数据插入、数据更新、数据删除等操作，同时还包括参数传递、结果集映射等内容。</p>
</blockquote>
</li>
<li><p><strong>动态 SQL：</strong></p>
<blockquote>
<p><code>MyBatis</code> 支持动态 <code>SQL</code>，可以根据不同的条件生成不同的 <code>SQL</code> 语句。动态 <code>SQL</code> 包括 <code>if、choose、when、otherwise、foreach</code> 等标签，可以实现复杂的 <code>SQL</code> 查询语句。</p>
</blockquote>
</li>
<li><p><strong>数据库连接池：</strong></p>
<blockquote>
<p><code>MyBatis</code> 可以通过数据库连接池来管理数据库连接，可以提高应用程序的性能和响应速度。<code>MyBatis</code> 内置了多种数据库连接池实现，例如 <code>Apache Commons DBCP、C3P0、BoneCP</code> 等。</p>
</blockquote>
</li>
<li><p><strong>一级缓存和二级缓存：</strong></p>
<blockquote>
<p><code>MyBatis</code> 内置了一级缓存和二级缓存，可以提高数据访问的性能。一级缓存是 <code>Session</code> 级别的缓存，可以通过配置关闭或清空；二级缓存是全局级别的缓存，可以通过配置进行开启或关闭。</p>
</blockquote>
</li>
<li><p><strong>插件机制：</strong></p>
<blockquote>
<p><code>MyBatis</code> 支持插件机制，可以扩展 <code>MyBatis</code> 的功能。插件可以对 <code>SQL</code> 语句进行拦截和修改，还可以对查询结果进行加工和处理，插件的实现可以使用 <code>JDK</code> 动态代理或者 <code>CGLib</code> 动态代理技术。</p>
</blockquote>
</li>
<li><p><strong>Spring 整合：</strong></p>
<blockquote>
<p><code>MyBatis</code> 可以和 <code>Spring</code> 框架进行整合，可以实现事务管理、注解驱动等功能。<code>MyBatis-Spring</code> 提供了多种整合方式，例如通过 <code>Spring XML</code> 配置、通过 <code>Spring</code> 注解配置等。</p>
</blockquote>
</li>
</ul>
<p>总之，MyBatis 是一款成熟稳定的 Java 持久层框架，具有灵活、高效、易用等优点。在使用 MyBatis 进行开发时，需要掌握 SQL 映射文件的编写、动态 SQL 的使用、数据库连接池的配置、缓存的使用、插件机制的扩展以及和 Spring 框架的整合等知识。</p>
<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><p>MyBatis 内置了多种数据库连接池实现，可以通过配置文件来选择使用哪种数据库连接池。常用的数据库连接池有以下几种：</p>
<ul>
<li><p><strong>1、PooledDataSource：</strong></p>
<blockquote>
<p>这是 MyBatis 内置的数据库连接池实现，基于 Apache Commons DBCP 实现。可以通过配置文件进行配置，例如设置最大连接数、最小连接数、连接超时时间等。</p>
</blockquote>
</li>
<li><p><strong>2、C3P0DataSource：</strong></p>
<blockquote>
<p>这是基于 C3P0 实现的数据库连接池，可以用于 MyBatis。C3P0 是一个开源的 JDBC 连接池，提供了高效的连接池管理，可以通过配置文件进行配置。</p>
</blockquote>
</li>
<li><p><strong>3、BoneCPDataSource：</strong></p>
<blockquote>
<p>这是基于 BoneCP 实现的数据库连接池，也可以用于 MyBatis。BoneCP 是一个高性能的 JDBC 连接池，提供了很多高级功能，例如闲置连接回收、分布式部署等。</p>
</blockquote>
</li>
</ul>
<p>使用 MyBatis 数据库连接池可以提高应用程序的性能和响应速度，同时还可以防止数据库连接泄漏和资源浪费。要使用 MyBatis 数据库连接池，可以按照以下步骤操作：<br>1、在 <code>pom.xml</code> 中添加数据库连接池的依赖，例如 <code>commons-dbcp、c3p0、bonecp</code> 等。<br>2、在 <strong>MyBatis</strong> 的配置文件中添加数据源的配置，例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>dataSource <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"POOLED"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"driver"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;jdbc.driver&#125;</span>"</span>/<span class="token operator">></span>
  <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"url"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;jdbc.url&#125;</span>"</span>/<span class="token operator">></span>
  <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"username"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;jdbc.username&#125;</span>"</span>/<span class="token operator">></span>
  <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"password"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;jdbc.password&#125;</span>"</span>/<span class="token operator">></span>
<span class="token operator">&lt;</span>/dataSource<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中，<code>type</code> 属性指定了使用的数据库连接池类型，可以是 <code>POOLED、UNPOOLED、JNDI</code> 等。</p>
<p>3、配置连接池的相关参数，例如最大连接数、最小连接数、连接超时时间等。具体的参数配置可以根据不同的连接池实现进行配置。</p>
<p>4、在 <code>SQL</code> 映射文件中使用数据库连接池，例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>select <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"getBook"</span> <span class="token assign-left variable">resultType</span><span class="token operator">=</span><span class="token string">"Book"</span><span class="token operator">></span>
  SELECT * FROM books WHERE <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment">#&#123;id&#125;</span>
<span class="token operator">&lt;</span>/select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用 <strong>MyBatis</strong> 数据库连接池可以提高应用程序的性能和可靠性，同时还可以方便地管理数据库连接。</p>
]]></content>
      <categories>
        <category>Mybatis教程</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>Mybatis教程</tag>
      </tags>
  </entry>
  <entry>
    <title>React安装教程</title>
    <url>/2023/0740161.html</url>
    <content><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul>
<li>安装本地React环境需要Node.js，如果具有Node环境跳过即可。</li>
<li>如果没有安装则可参考该篇文章安装Node环境，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkxNTY0Ny9hcnRpY2xlL2RldGFpbHMvMTMxMzQ0NzUyP3NwbT0xMDAxLjIwMTQuMzAwMS41NTAx">点击查看<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="React安装"><a href="#React安装" class="headerlink" title="React安装"></a>React安装</h1><ol>
<li>全局安装React</li>
</ol>
<ul>
<li><p>首先打开命令行，建议以管理员身份</p>
</li>
<li><p>输入命令：<code>npm install -g create-react-app</code></p>
<img data-src="/2023/0740161/effc4615f0c046f6b07ad6dd6d3a8f35.png" class title="[title]"></li>
</ul>
<ol start="2">
<li><p>安装完成后，输入命令<code>create-react-app -V</code>查看时候成功</p>
 <img data-src="/2023/0740161/effc4615f0c046f6b07ad6dd6d3a8f35.png" class>
</li>
<li><p>创建React项目<br> 在自己选定的目录下输入命令：<code>create-react-app reactdemo</code>进行创建项目，注意reactdemo为自己命名的项目名。</p>
</li>
</ol>
  <img data-src="/2023/0740161/ef2ead85b53842058461b3954832c502.png" class>
<p>  如上则成功创建一个新的react项目。</p>
<ol start="4">
<li>运行react项目<br> 首先进入刚才创建的项目的根目录下，然后输入命令<code>npm start</code></li>
</ol>
  <img data-src="/2023/0740161/ddba23821fd14cdc9acd9670f03f88ac.png" class>

<ol start="5">
<li>运行成功后的界面，如图所示</li>
</ol>
  <img data-src="/2023/0740161/756bcf1f59fe449aa2d6c65bad2fd57f.png" class>


<ol start="6">
<li>之后可以通过自己安装的IDE打开该项目，进行编写了。</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>String字符串拼接</title>
    <url>/2023/0765346.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>对于String来说是不可变的，使用+修改字符串是在不断地创建新的字符串对象，而不是在原有的对象上修改的。并且对于字符串的修改和拼接通常提供StringBuffer和StringBuilder，以及使用的String.join()方法，具体如下所示。</p>
<h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h1><h2 id="StringBuilder介绍"><a href="#StringBuilder介绍" class="headerlink" title="StringBuilder介绍"></a>StringBuilder介绍</h2><p><strong>StringBuilder</strong>是Java中的一个类，用于处理可变的字符串。它的设计目的是在进行频繁的字符串操作时，<strong>避免创建多个不可变的<code>String</code>对象，从而提高字符串的处理效率</strong>。<code>StringBuilder</code>类位于<code>java.lang</code>包中，无需额外导入就可以直接使用。</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol>
<li>创建<code>StringBuilder</code>对象：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>添加字符串：</li>
</ol>
<p>使用<code>append()</code>方法在<code>StringBuilder</code>末尾添加字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>或者使用链式调用：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>插入字符串：</li>
</ol>
<p>使用<code>insert()</code>方法在指定位置插入字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ”wuhaha“<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>删除字符串：</li>
</ol>
<p>使用<code>delete()</code>方法删除指定范围内的字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>替换字符串：</li>
</ol>
<p>使用<code>replace()</code>方法替换指定范围内的字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="6">
<li>反转字符串：</li>
</ol>
<p>使用<code>reverse()</code>方法反转<code>StringBuilder</code>中的内容。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="7">
<li>获取字符串：</li>
</ol>
<p>使用<code>toString()</code>方法将<code>StringBuilder</code>转换为一个不可变的<code>String</code>对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="8">
<li>获取当前容量和长度：</li>
</ol>
<p><code>capacity()</code>方法返回当前<code>StringBuilder</code>的容量（可容纳字符的最大数量）。 <code>length()</code>方法返回当前<code>StringBuilder</code>中实际包含的字符数。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> capacity <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="9">
<li>设置容量：</li>
</ol>
<p>使用<code>ensureCapacity()</code>方法设置<code>StringBuilder</code>的容量。这样可以提前分配足够的空间，避免频繁地扩容，提高性能。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置容量为100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="10">
<li>清空<code>StringBuilder</code>：</li>
</ol>
<p>使用<code>setLength()</code>方法将<code>StringBuilder</code>的长度设置为0，清空其中的内容。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>StringBuilder</code>是非线程安全的，如果在多线程环境下使用，建议使用<code>StringBuffer</code>类，它与<code>StringBuilder</code>类功能相似，但是线程安全。通常情况下，如果不涉及多线程操作，推荐使用<code>StringBuilder</code>，因为它的性能更好,速度也更快一些。</p>
<h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><p><code>StringBuffer</code>是Java中用于处理可变字符串的类，它与<code>StringBuilder</code>类似，但是具有线程安全的特性。<code>StringBuffer</code>类位于<code>java.lang</code>包中，无需额外导入就可以直接使用。</p>
<p>以下是<code>StringBuffer</code>的详细使用说明：</p>
<ol>
<li><p>创建<code>StringBuffer</code>对象：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>添加字符串：</p>
<p>使用<code>append()</code>方法在<code>StringBuffer</code>末尾添加字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>或者使用链式调用：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>插入字符串：</p>
<p>使用<code>insert()</code>方法在指定位置插入字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">" beautiful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除字符串：</p>
<p>使用<code>delete()</code>方法删除指定范围内的字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>替换字符串：</p>
<p>使用<code>replace()</code>方法替换指定范围内的字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>反转字符串：</p>
<p>使用<code>reverse()</code>方法反转<code>StringBuffer</code>中的内容。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>获取字符串：</p>
<p>使用<code>toString()</code>方法将<code>StringBuffer</code>转换为一个不可变的<code>String</code>对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>获取当前容量和长度：</p>
<p><code>capacity()</code>方法返回当前<code>StringBuffer</code>的容量（可容纳字符的最大数量）。 <code>length()</code>方法返回当前<code>StringBuffer</code>中实际包含的字符数。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> capacity <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>设置容量：</p>
<p>使用<code>ensureCapacity()</code>方法设置<code>StringBuffer</code>的容量。这样可以提前分配足够的空间，避免频繁地扩容，提高性能。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置容量为100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>清空<code>StringBuffer</code>：</p>
<p>使用<code>setLength()</code>方法将<code>StringBuffer</code>的长度设置为0，清空其中的内容。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p><code>StringBuffer</code>是线程安全的，适用于多线程环境下的字符串操作。但是在单线程环境下，如果没有特殊需求，推荐使用<code>StringBuilder</code>，因为它的性能更好。除非确实需要线程安全，否则<code>StringBuilder</code>通常更适合日常使用。</p>
<h1 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h1><p><code>StringJoiner</code>是Java中用于拼接字符串的类，它提供了一种简单的方法来连接多个字符串，并可以在字符串之间添加分隔符。<code>StringJoiner</code>类位于<code>java.util</code>包中，需要导入使用。</p>
<p>以下是<code>StringJoiner</code>的详细使用说明：</p>
<ol>
<li><p>创建<code>StringJoiner</code>对象：</p>
<p>构造函数接收两个参数：分隔符（delimiter）和可选的前缀（prefix）和后缀（suffix）。分隔符是必需的，而前缀和后缀是可选的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringJoiner</span> sj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面的例子表示使用逗号作为分隔符，同时在拼接的结果字符串前后分别添加方括号 <code>[</code> 和 <code>]</code>。</p>
</li>
<li><p>添加字符串：</p>
<p>使用<code>add()</code>方法向<code>StringJoiner</code>中添加字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这将在分隔符之间拼接字符串，并自动处理分隔符的添加。</p>
</li>
<li><p>获取拼接结果：</p>
<p>使用<code>toString()</code>方法获取最终的拼接结果。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> sj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最终的结果将是 <code>&quot;[apple,orange,banana]&quot;</code>。</p>
</li>
<li><p>设置空值替换：</p>
<p>使用<code>setEmptyValue()</code>方法设置当<code>StringJoiner</code>没有任何元素时返回的默认值。默认情况下，<code>StringJoiner</code>没有任何元素时返回空字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sj<span class="token punctuation">.</span><span class="token function">setEmptyValue</span><span class="token punctuation">(</span><span class="token string">"No fruits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置默认值为 "No fruits"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果在没有添加任何字符串的情况下调用<code>toString()</code>方法，将返回设置的默认值。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> sj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果没有添加任何元素，将返回 "No fruits"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p><code>StringJoiner</code>类提供了一种简单而灵活的方式来拼接字符串，并可以很方便地在每个字符串之间添加分隔符和前后缀。它特别适合于需要构建带有分隔符的字符串，如CSV文件、JSON数组等。</p>
<h1 id="String-Join"><a href="#String-Join" class="headerlink" title="String.Join()"></a>String.Join()</h1><p><code>String.join()</code>是Java中<code>String</code>类提供的静态方法，用于将多个字符串按照指定的分隔符连接成一个单一的字符串。<code>String.join()</code>方法在Java 8及更高版本中引入，相比于早期版本中的<code>StringUtils.join()</code>或<code>StringBuffer</code>&#x2F;<code>StringBuilder</code>的操作，更加简洁和方便。</p>
<p>以下是<code>String.join()</code>的详细使用说明：</p>
<ol>
<li><p>使用<code>String.join()</code>：</p>
<p><code>String.join()</code>方法接收两个参数：分隔符（delimiter）和要连接的多个字符串（Iterable、数组等）。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> delimiter <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的例子表示使用逗号作为分隔符，将字符串 <code>&quot;apple&quot;</code>、<code>&quot;orange&quot;</code> 和 <code>&quot;banana&quot;</code> 连接成一个字符串。最终的结果将是 <code>&quot;apple,orange,banana&quot;</code>。</p>
</li>
<li><p>使用数组作为参数：</p>
<p><code>String.join()</code>方法也可以接收一个字符串数组作为参数。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> delimiter <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"2019"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> date <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面的例子使用连字符（<code>-</code>）作为分隔符，将字符串数组 <code>array</code> 中的元素连接成一个日期字符串。最终的结果将是 <code>&quot;2019-08-31&quot;</code>。</p>
</li>
<li><p>使用Iterable作为参数：</p>
<p><code>String.join()</code>方法还可以接收一个<code>Iterable</code>对象作为参数，例如<code>List</code>、<code>Set</code>等。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> delimiter <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> words <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"awesome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sentence <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面的例子使用空格作为分隔符，将<code>List</code>对象 <code>words</code> 中的元素连接成一个句子。最终的结果将是 <code>&quot;Java is awesome&quot;</code>。</p>
</li>
</ol>
<p><code>String.join()</code>方法非常简单易用，它提供了一种快速拼接字符串的方式，特别适用于需要在多个字符串之间添加分隔符的场景，如拼接CSV数据、构建URL等。</p>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>StringBuilder</tag>
        <tag>StringBuffer</tag>
        <tag>join</tag>
        <tag>字符串拼接</tag>
      </tags>
  </entry>
  <entry>
    <title>UML知识简要总结</title>
    <url>/2023/08b780455c.html</url>
    <content><![CDATA[<h1 id="1、简要总结"><a href="#1、简要总结" class="headerlink" title="1、简要总结"></a>1、简要总结</h1><p>UML（Unified Modeling Language，统一建模语言）是一种用于软件系统设计和开发的图形化语言。它是一种通用的、标准化的、基于面向对象的建模语言，可以用于描述和设计各种软件系统。以下是 UML 的一些常用知识点：</p>
<ul>
<li><p><strong>UML 中的基本元素：</strong></p>
<blockquote>
<p>UML 中有三种基本元素，分别是结构元素、行为元素和分组元素。结构元素包括类、接口、包、对象等，行为元素包括用例、活动、状态机等，分组元素包括组、子系统、节点等。</p>
</blockquote>
</li>
<li><p><strong>UML 中的类图：</strong></p>
<blockquote>
<p>类图是 UML 中最常用的图之一，用于描述系统中的类、接口、关系等元素。类图中常用的关系包括继承、实现、关联、聚合、组合等。其中，继承关系表示类之间的继承关系，实现关系表示接口的实现关系，关联关系表示两个类之间的关联关系，聚合关系表示整体与部分之间的关系，组合关系表示强关联的整体与部分之间的关系。</p>
</blockquote>
</li>
<li><p><strong>UML 中的时序图：</strong></p>
<blockquote>
<p>时序图是 UML 中用于描述系统中对象之间的交互关系的图形化工具。时序图中通常包含对象、生命线、消息、同步和异步消息等元素。时序图可以用于描述系统中对象之间的交互过程，包括同步和异步消息的交互过程。</p>
</blockquote>
</li>
<li><p><strong>UML 中的用例图：</strong></p>
<blockquote>
<p>用例图是 UML 中用于描述系统中用户和系统之间的交互的图形化工具。用例图中通常包含参与者、用例、关系等元素。用例图可以用于描述系统中的功能需求和用户需求，从而帮助开发人员和用户更好地理解系统。</p>
</blockquote>
</li>
<li><p><strong>UML 中的活动图：</strong></p>
</li>
</ul>
<blockquote>
<p>活动图是 UML 中用于描述系统中业务流程的图形化工具。活动图中通常包含起始节点、活动节点、决策节点、合并节点等元素。活动图可以用于描述系统中的业务流程，从而帮助开发人员更好地理解系统的业务流程。</p>
</blockquote>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>UML</tag>
        <tag>UML知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/0716107.html</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation<i class="fa fa-external-link-alt"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting<i class="fa fa-external-link-alt"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub<i class="fa fa-external-link-alt"></i></span>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows快捷打开管理员模式命令行方式</title>
    <url>/2023/08e0ceff35.html</url>
    <content><![CDATA[<h1 id="鼠标点击启动"><a href="#鼠标点击启动" class="headerlink" title="鼠标点击启动"></a>鼠标点击启动</h1><ul>
<li>windows搜索框搜索cmd或者命令行,如下所示：</li>
</ul>
<img data-src="/2023/08e0ceff35/image-20230802195303970.png" class>

<h1 id="Win-R启动"><a href="#Win-R启动" class="headerlink" title="Win+R启动"></a>Win+R启动</h1><ul>
<li>使用Win+R快捷键，然后输入cmd后，再次使用Ctrl+Shift+Enter快捷键打开管理员模式命令行</li>
</ul>
<h1 id="为打开管理员模式命令行设置快捷键"><a href="#为打开管理员模式命令行设置快捷键" class="headerlink" title="为打开管理员模式命令行设置快捷键"></a>为打开管理员模式命令行设置快捷键</h1><ol>
<li>windows搜索框搜索cmd，然后点击打开文件位置，如下图所示</li>
</ol>
<img data-src="/2023/08e0ceff35/image-20230802195748221.png" class>



<ol start="2">
<li>进入文件后，把下面的命令提示符快捷方式复制一份放在桌面，如下所示：</li>
</ol>
<img data-src="/2023/08e0ceff35/image-20230802202441605.png" class>

<ol start="3">
<li>复制后，先重命名一下，我这里命名的是命令提示符管理员，以便于移回原先的文件夹(放在桌面不美观，当然你也可以选择自己想要放的位置，并不影响)，重命名后剪切移动到原来的位置，如下所示：</li>
</ol>
<img data-src="/2023/08e0ceff35/image-20230802203013311.png" class>

<ol start="4">
<li>右键重命名后得到的快捷方式，选择属性，然后选择自己记得住且不会冲突的快捷键，我选择的是Ctrl+K如下所示：</li>
</ol>
<img data-src="/2023/08e0ceff35/image-20230802203458849.png" class>

<img data-src="/2023/08e0ceff35/image-20230802203707536.png" class>

<ol start="5">
<li>然后点击高级，勾选用管理员身份运行，之后点击确定和应用即可。</li>
</ol>


<ol start="6">
<li><p>然后使用快捷键即可快捷使用管理员模式命令提示符</p>
<img data-src="/2023/08e0ceff35/image-20230802204059861.png" class></li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
        <category>Windows命令</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>管理员模式cmd</tag>
        <tag>管理员命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的几种遍历方式</title>
    <url>/2023/08ed7e80a0.html</url>
    <content><![CDATA[<p>对于二叉树的前中后序排序是根据根节点的访问顺序确定的。</p>
<h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h1><ul>
<li>访问顺序：根-左-右</li>
</ul>
<h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><ul>
<li>访问顺序：左-根-右</li>
</ul>
<h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><ul>
<li>访问顺序：左-右-根</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>小练习01</title>
    <url>/2023/08f6390c92.html</url>
    <content><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>1：编程实现，通过键盘输入6位卡号，求6位数字之和。</p>
<p>2：编程实现，通过键盘输入天数，求一共有几周零几天。</p>
<p>3：编程实现：通过键盘输入半径，求圆的周长与面积。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">day0804<span class="token punctuation">.</span>homework</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @author zzjie
 * @version 1.0
 * @date 2023/8/4 11:56
 * @description: 0804作业
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Homework</span> homework <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Homework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入6为卡号: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a<span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡号 "</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">" 的各位数字之和为: "</span><span class="token operator">+</span>homework<span class="token punctuation">.</span><span class="token function">toSum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入天数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>homework<span class="token punctuation">.</span><span class="token function">toDay</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入圆的半径: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> c<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>homework<span class="token punctuation">.</span><span class="token function">toArea</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
   <span class="token comment">/** 
    * @description: 1、编程实现，通过键盘输入6位卡号，求6位数字之和。
    * @param: num 
    * @return: int
    * @author zzjie
    * @date: 2023/8/4 11:59
    */</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">toSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sum<span class="token operator">+=</span>num<span class="token operator">/</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">/** 
     * @description: 2：编程实现，通过键盘输入天数，求一共有几周零几天。
     * @param: num 
     * @return: java.lang.String 
     * @author zzjie
     * @date: 2023/8/4 12:08
     */</span> 
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> week<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>day<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        week <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">;</span>
        day <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> num<span class="token operator">+</span><span class="token string">" 天，共有 "</span><span class="token operator">+</span>week<span class="token operator">+</span><span class="token string">" 周零 "</span><span class="token operator">+</span>day<span class="token operator">+</span><span class="token string">" 天"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/** 
     * @description:  3：编程实现：通过键盘输入半径，求圆的周长与面积。
     * @param: r
     * @return: java.lang.String 
     * @author zzjie
     * @date: 2023/8/4 12:15
     */</span> 
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        s<span class="token operator">=</span><span class="token constant">PI</span><span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span>   <span class="token comment">// or s=PI*Math.pow(r,2);</span>
        c<span class="token operator">=</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"半径为 "</span><span class="token operator">+</span>r<span class="token operator">+</span><span class="token string">" 的圆，圆的周长为: "</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">" ，面积为: "</span><span class="token operator">+</span>s<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java练习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java教程</tag>
        <tag>java知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举类</title>
    <url>/2023/088398734e.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Java枚举类是一种特殊类型的类，它代表一组常量值，通常用于表示固定的、预定义的一组值。枚举类在Java中是一种非常有用的数据类型，它提供了更好的可读性和类型安全性，比起使用普通常量或整数等数据类型更具优势。在Java中，枚举类是通过<code>enum</code>关键字定义的。</p>
<h1 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h1><p>以下是Java枚举类的详细知识：</p>
<ol>
<li><p>定义枚举类：</p>
<p>通过<code>enum</code>关键字可以定义一个枚举类。枚举类的实例是常量，通常用大写字母表示。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">&#123;</span>
    <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>枚举常量：</p>
<p>在枚举类中定义的常量称为枚举常量，它们是枚举类的实例。每个枚举常量都是唯一的，代表了枚举类中的一个固定值。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Day</span> today <span class="token operator">=</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>枚举方法：</p>
<p>枚举类可以定义方法，可以在枚举常量中为每个值添加自定义的行为。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">&#123;</span>
    <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token string">"Monday"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">TUESDAY</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token string">"Tuesday"</span><span class="token punctuation">;</span>
            <span class="token comment">// 其他枚举常量的处理</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token string">"Unknown"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>枚举构造函数和字段：</p>
<p>枚举类可以有构造函数，但构造函数只能是私有的。枚举常量在定义时就会调用私有构造函数来创建实例。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">&#123;</span>
    <span class="token function">MONDAY</span><span class="token punctuation">(</span><span class="token string">"Mon"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TUESDAY</span><span class="token punctuation">(</span><span class="token string">"Tue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WEDNESDAY</span><span class="token punctuation">(</span><span class="token string">"Wed"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">THURSDAY</span><span class="token punctuation">(</span><span class="token string">"Thu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FRIDAY</span><span class="token punctuation">(</span><span class="token string">"Fri"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SATURDAY</span><span class="token punctuation">(</span><span class="token string">"Sat"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUNDAY</span><span class="token punctuation">(</span><span class="token string">"Sun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> abbreviation<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Day</span><span class="token punctuation">(</span><span class="token class-name">String</span> abbreviation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>abbreviation <span class="token operator">=</span> abbreviation<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAbbreviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> abbreviation<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用枚举类：</p>
<p>可以通过枚举常量来访问枚举类的成员。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Day</span> today <span class="token operator">=</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "MONDAY"</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getDayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Monday"</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getAbbreviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Mon"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>name()：返回常量值</p>
</li>
<li><p>ordinal()：返回定义的常量的顺序，从0开始计数</p>
</li>
</ol>
<p>如下图所示：</p>
<img data-src="/2023/088398734e/image-20230801151543493.png" class>

<ol>
<li>枚举的其他特性：<ul>
<li>枚举类可以实现接口，让枚举常量具有接口中定义的行为。</li>
<li>可以在枚举类中定义抽象方法，然后为每个枚举常量提供具体实现。</li>
<li>枚举类可以用在<code>switch</code>语句中，代替常规的整数或字符型数据。</li>
</ul>
</li>
</ol>
<p>总结来说，Java枚举类是一种非常方便的数据类型，可以帮助我们定义一组固定的常量值，并为每个值提供自定义的行为。使用枚举类可以使代码更加清晰、可读，并提高代码的类型安全性。</p>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>枚举</tag>
        <tag>Java枚举类</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程开发方法总结</title>
    <url>/2023/08b31810d4.html</url>
    <content><![CDATA[<p><strong>软件开发方法</strong>：软件开发方法包括了传统的<strong>瀑布模型</strong>、<strong>敏捷开发</strong>、<strong>迭代开发</strong>等方法。不同的开发方法适用于不同的项目需求，开发人员需要根据具体情况选择合适的开发方法。</p>
<h1 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h1><p><strong>瀑布模型</strong>是一种传统的软件开发模型，它将软件开发过程分为多个阶段，每个阶段依次进行直到最终的软件交付。下面是瀑布模型的详细解释：</p>
<ul>
<li><p><strong>需求分析阶段</strong>：<br>在这个阶段，开发人员需要与客户沟通和了解项目需求，确定软件的功能和性能要求。开发人员需要编写需求规格说明书，描述软件系统的功能、性能和约束等，以便后续的设计和开发。</p>
</li>
<li><p><strong>设计阶段</strong>：<br>在这个阶段，开发人员需要基于需求规格说明书进行软件设计，包括系统架构设计、模块设计和界面设计等。开发人员需要编写软件设计文档，描述软件系统的结构、接口、算法和数据结构等。</p>
</li>
<li><p><strong>编码阶段</strong>：<br>在这个阶段，开发人员根据软件设计文档进行编码实现，编写代码并进行单元测试。开发人员需要按照编码规范和标准进行开发，并且需要进行代码审查和测试以确保代码的质量和可靠性。</p>
</li>
<li><p><strong>测试阶段</strong>：<br>在这个阶段，开发人员需要进行软件系统的集成测试和系统测试，以确保软件系统的功能和性能达到需求规格说明书中的要求。测试人员需要编写测试用例和测试脚本，进行测试并记录测试结果和问题。</p>
</li>
<li><p><strong>维护阶段</strong>：<br>在这个阶段，开发人员需要对软件系统进行维护和升级，修复已知的问题并添加新的功能。维护阶段可能会持续很长时间，直到软件系统被废弃。</p>
</li>
</ul>
<p><strong>瀑布模型</strong>的优点是<strong>结构清晰，开发流程明确，便于管理和控制</strong>。缺点是<strong>开发周期长、成本高，难以适应需求变化和快速迭代的需求</strong>。因此，<strong>在实际开发中，瀑布模型常常与其他软件开发方法结合使用，如增量模型、原型模型和敏捷开发等，以提高软件开发的效率和质量</strong>。</p>
<h1 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h1><p><strong>增量模型</strong>是一种软件开发模型，它将软件开发过程分为多个独立的增量阶段，每个阶段都是一个小的项目，包括需求分析、设计、开发、测试和发布等。每个增量都是一个可用的软件系统，可以在之后的开发过程中不断迭代和增强，直到最终满足用户的需求。</p>
<p>以下是增量模型的详细解释：</p>
<ul>
<li><p><strong>需求分析阶段</strong>：<br>在这个阶段，开发人员需要与客户沟通和了解项目需求，确定软件的功能和性能要求。开发人员需要编写需求规格说明书，描述软件系统的功能、性能和约束等，以便后续的设计和开发。</p>
</li>
<li><p><strong>第一个增量阶段</strong>：<br>在这个阶段，开发人员需要根据需求规格说明书进行第一个增量的设计、开发、测试和发布，该增量是一个基本的、最小的可用软件系统，包括基本的功能和用户界面。</p>
</li>
<li><p><strong>第二个增量阶段</strong>：<br>在这个阶段，开发人员需要根据用户反馈和需求变化进行第二个增量的设计、开发、测试和发布，该增量增加了新的功能和性能，同时修复了之前的问题和漏洞。</p>
</li>
<li><p><strong>后续增量阶段</strong>：<br>在这个阶段，开发人员不断地迭代和增强之前的增量，添加新的功能、性能和用户界面，同时进行测试和发布。每个增量都是一个可用的软件系统，用户可以根据需要选择使用。</p>
</li>
</ul>
<p><strong>增量模型</strong>的优点是<strong>开发周期短、成本低，容易适应需求变化和快速迭代的需求</strong>。缺点是<strong>每个增量都是一个独立的软件系统，可能会存在不一致性和兼容性问题，需要进行集成测试和配置管理</strong>等。因此，在实际开发中，增量模型常常与其他软件开发方法结合使用，如瀑布模型、原型模型和敏捷开发等，以提高软件开发的效率和质量。</p>
<h1 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h1><p><strong>原型模型</strong>是一种软件开发模型，它主要用于快速原型开发和验证。原型模型将软件开发过程分为两个主要阶段：<strong>快速原型开发和原型演化</strong>。在快速原型开发阶段，开发人员创建一个可用的软件原型，以验证系统的功能和性能要求。在原型演化阶段，开发人员对原型进行修改和完善，最终得到一个符合用户需求的完整软件系统。</p>
<p>以下是原型模型的详细解释：</p>
<ul>
<li><p><strong>快速原型开发阶段</strong>：<br>在这个阶段，开发人员与客户密切合作，了解用户需求，根据用户需求创建一个可用的软件原型。这个原型是一个快速开发的、简单的、基本的软件系统，用于验证系统的功能和性能要求。在这个阶段，开发人员不需要完全满足所有需求，只需要提供一个可用的原型，以便用户可以验证系统的功能和性能。</p>
</li>
<li><p><strong>原型演化阶段</strong>：<br>在这个阶段，开发人员需要对原型进行修改和完善，直到最终满足用户的需求。在这个阶段，开发人员需要与客户紧密合作，收集用户反馈和需求变化，根据需求变化对原型进行修改和完善。在这个阶段，开发人员需要进行测试和发布，确保软件系统符合用户需求和要求。</p>
</li>
</ul>
<p>原型模型的优点是<strong>开发速度快、成本低，容易适应需求变化和快速迭代的需求</strong>。缺点是原型<strong>通常是基于快速开发技术创建的，可能存在代码质量和可维护性问题，需要进行集成测试和配置管理等</strong>。因此，在实际开发中，原型模型常常与其他软件开发方法结合使用，如瀑布模型、增量模型和敏捷开发等，以提高软件开发的效率和质量。</p>
<h1 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h1><p><strong>敏捷开发</strong>是一种<strong>迭代的、增量的、协作的</strong>软件开发方法，它强调通过<strong>快速反馈</strong>和<strong>不断调整</strong>来满足客户需求。敏捷开发<strong>强调团队合作、快速响应变化、持续改进和可维护的代码</strong>等特点，可以帮助团队快速适应变化的需求和市场。</p>
<p>以下是敏捷开发的详细解释：</p>
<ul>
<li><p><strong>客户参与</strong>：<br>敏捷开发强调客户参与开发过程，包括对需求的讨论、反馈和优先级排序等。通过客户的参与，开发团队可以更好地理解用户需求和期望，以确保最终的软件系统能够满足用户需求。</p>
</li>
<li><p><strong>快速迭代</strong>：<br>敏捷开发采用迭代的方式进行软件开发，每个迭代周期通常为几周至几个月。在每个迭代周期结束时，团队会进行回顾和反馈，以确定下一步的开发方向和优先级。</p>
</li>
<li><p><strong>自组织团队</strong>：<br>敏捷开发鼓励自组织和自管理的团队，团队成员可以根据自己的技能和兴趣自由选择任务和角色。这种自组织的方式可以激发团队成员的创造力和积极性，提高团队的协作和效率。</p>
</li>
<li><p><strong>持续交付</strong>：<br>敏捷开发强调持续交付可用软件，即在开发过程中不断交付可用的软件系统，以获得快速反馈和验证。这种持续交付的方式可以减少开发风险和成本，同时增强客户对软件开发进度的掌控。</p>
</li>
<li><p><strong>反馈和改进</strong>：<br>敏捷开发鼓励团队进行反馈和改进，包括团队内部的反馈和客户的反馈。通过反馈和改进，团队可以不断提高自己的工作效率和质量水平，从而更好地满足客户需求和市场变化。</p>
</li>
</ul>
<p>敏捷开发的优点是<strong>适应变化、快速响应市场、强调团队协作和反馈</strong>等特点，<strong>可以帮助团队快速开发出满足用户需求的软件系统</strong>。缺点是<strong>需要更多的沟通和合作成本，对团队成员的素质要求更高，需要更多的自我学习和不断改进</strong>。因此，在实际开发中，敏捷开发通常需要配合一些项目管理工具和技术使用。</p>
<h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p>DevOps是一种软件开发和运维的方法，旨在<strong>通过软件开发和运维之间的协作和自动化来实现快速交付高质量的软件</strong>。</p>
<p>DevOps的核心思想是<strong>将开发和运维的过程集成在一起，以实现更快速、更可靠的软件交付和更快速的反馈</strong>。DevOps通过以下几个方面来实现：</p>
<ul>
<li><p><strong>自动化</strong>：<br>DevOps强调自动化，包括自动化测试、自动化构建、自动化部署和自动化运维等。自动化可以减少手动操作，提高效率和准确性，同时可以减少人为错误。</p>
</li>
<li><p><strong>协作</strong>：<br>DevOps要求开发和运维之间进行紧密的协作，共同完成软件的开发和部署，确保软件在运行过程中的可靠性和稳定性。</p>
</li>
<li><p><strong>持续交付</strong>：<br>DevOps要求软件开发和运维的过程不断地交付软件版本，使得软件的开发、测试、部署等过程能够快速迭代和更新，以适应市场变化和用户需求。</p>
</li>
<li><p><strong>可视化和监控</strong>：<br>DevOps通过可视化和监控来跟踪软件开发和运维的过程，及时发现问题和进行调整和优化，提高软件的可靠性和稳定性。</p>
</li>
<li><p><strong>容器化</strong>：<br>DevOps推崇容器化技术，如Docker等，将软件的运行环境进行标准化和封装，使得软件的部署和运行更加便捷和高效。</p>
</li>
</ul>
<p>总之，DevOps是一种<strong>注重自动化、协作和持续交付</strong>的软件开发和运维方法。通过DevOps的实践，可以加快软件开发和部署的速度，提高软件的质量和可靠性，以更好地满足用户需求和市场变化。</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
        <tag>软件开发方法</tag>
        <tag>软件开发模型</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程概述</title>
    <url>/2023/08b85236bf.html</url>
    <content><![CDATA[<p><strong>软件工程</strong>是一门关于软件开发过程的学科，它包括了<strong>软件开发、测试、部署、运维</strong>等方面的知识。以下是一些常见的软件工程知识点：</p>
<h1 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h1><blockquote>
<p>软件生命周期指从软件的开发、测试、部署到维护和升级的整个过程。软件生命周期可以分为几个阶段，如计划、需求分析、设计、编码、测试、部署、维护等。</p>
</blockquote>
<h1 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h1><blockquote>
<p>软件开发方法包括了传统的瀑布模型、敏捷开发、迭代开发等方法。不同的开发方法适用于不同的项目需求，开发人员需要根据具体情况选择合适的开发方法。</p>
</blockquote>
<h1 id="软件需求分析"><a href="#软件需求分析" class="headerlink" title="软件需求分析"></a>软件需求分析</h1><blockquote>
<p>软件需求分析是软件开发的第一步，它的目的是确定软件的功能和性能要求，并将这些要求转化为系统能够实现的具体的功能和规格。</p>
</blockquote>
<h1 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h1><blockquote>
<p>软件设计是指根据需求分析的结果，确定软件的系统结构、模块划分、接口设计等，以实现需求分析中确定的功能和性能要求。</p>
</blockquote>
<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><blockquote>
<p>软件测试是指对已经开发的软件进行测试和验证，以确保其符合需求和规格要求。测试包括功能测试、性能测试、安全测试、可靠性测试等。</p>
</blockquote>
<h1 id="软件部署"><a href="#软件部署" class="headerlink" title="软件部署"></a>软件部署</h1><blockquote>
<p>软件部署是指将已经测试通过的软件部署到用户环境中，并确保软件的正常运行。</p>
</blockquote>
<h1 id="软件维护"><a href="#软件维护" class="headerlink" title="软件维护"></a>软件维护</h1><blockquote>
<p>软件维护是指对已经部署的软件进行修复、更新、升级等操作，以保证软件能够持续运行并满足用户的需求。</p>
</blockquote>
<h1 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a>质量保证</h1><blockquote>
<p>软件质量保证是确保软件开发过程中符合规范和标准，以保证软件的质量和可靠性。它包括了软件过程改进、代码审查、测试和质量度量等方面。</p>
</blockquote>
<h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><blockquote>
<p>软件项目管理是指对软件开发过程进行规划、组织、协调和控制，以确保项目能够按时完成、满足质量要求和预算控制。</p>
</blockquote>
<p>软件工程知识是软件开发过程中必不可少的部分，掌握这些知识可以帮助开发人员更好地理解软件开发过程，并提高软件的质量和可靠性。</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试简介</title>
    <url>/2023/08a9f1ca1d.html</url>
    <content><![CDATA[<h1 id="软件测试概述"><a href="#软件测试概述" class="headerlink" title="软件测试概述"></a>软件测试概述</h1><p>软件测试是指在软件开发过程中，通过对软件系统进行各种测试和验证，以检测软件中的错误和缺陷，保证软件质量，提高软件可靠性和稳定性的过程。软件测试在软件工程中起到至关重要的作用，它可以在软件发布之前发现并修复缺陷和错误，保证软件的稳定性和可靠性，提高软件的用户体验和满意度。</p>
<p>软件测试包括以下几个方面：</p>
<ul>
<li><p><strong>静态测试：</strong></p>
<blockquote>
<p>静态测试是指对软件系统进行非执行性的测试，如代码审查、需求审查、设计审查、文档审查等，主要用于发现软件系统中的错误和缺陷。</p>
</blockquote>
</li>
<li><p><strong>动态测试：</strong></p>
<blockquote>
<p>动态测试是指对软件系统进行执行性的测试，如单元测试、集成测试、系统测试、验收测试等，主要用于发现软件系统中的功能错误和性能问题。</p>
</blockquote>
</li>
<li><p><strong>自动化测试：</strong></p>
<blockquote>
<p>自动化测试是指使用自动化测试工具来执行软件测试，如自动化测试脚本、自动化测试工具等，可以减少手动测试的工作量，提高测试效率和准确性。</p>
</blockquote>
</li>
<li><p><strong>性能测试：</strong></p>
<blockquote>
<p>性能测试是指对软件系统进行性能测试，如负载测试、压力测试、并发测试等，主要用于发现软件系统中的性能问题和瓶颈。</p>
</blockquote>
</li>
<li><p><strong>安全测试：</strong></p>
<blockquote>
<p>安全测试是指对软件系统进行安全测试，如漏洞测试、攻击测试、数据安全测试等，主要用于发现软件系统中的安全问题和漏洞。</p>
</blockquote>
</li>
</ul>
<p>总之，软件测试是软件开发中不可或缺的一部分，它可以保证软件的质量和稳定性，为软件的发布和上线提供保障。在软件开发过程中，开发人员需要充分重视软件测试工作，并根据具体的需求和情况进行选择和应用。</p>
<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>单元测试是软件测试中的一种测试方法，是针对软件系统中的最小单元——代码中的函数或方法进行测试的过程。单元测试旨在保证软件系统中的每个单元都能够按照预期工作，从而确保软件系统的稳定性和可靠性。<br>在进行单元测试时，开发人员通常需要遵循以下步骤：</p>
<ul>
<li><p><strong>选择单元：</strong></p>
<blockquote>
<p>选择需要进行测试的单元，通常是代码中的函数或方法。</p>
</blockquote>
</li>
<li><p><strong>编写测试用例：</strong></p>
<blockquote>
<p>针对每个单元编写测试用例，包括输入数据和期望输出结果。</p>
</blockquote>
</li>
<li><p><strong>运行测试：</strong></p>
<blockquote>
<p>运行测试用例，检查实际输出结果是否与期望结果一致。</p>
</blockquote>
</li>
<li><p><strong>分析测试结果：</strong></p>
<blockquote>
<p>分析测试结果，确认是否存在错误或缺陷。</p>
</blockquote>
</li>
<li><p><strong>修改代码：</strong></p>
<blockquote>
<p>如果测试结果存在错误或缺陷，需要对代码进行修改和优化，然后重新运行测试。</p>
</blockquote>
</li>
<li><p><strong>重复测试：</strong></p>
<blockquote>
<p>重复以上步骤，直到测试结果符合预期为止。</p>
</blockquote>
</li>
</ul>
<p>单元测试可以有效地发现代码中的错误和缺陷，提高软件的质量和稳定性。它可以帮助开发人员快速地发现并修复错误，避免错误的逐步积累，从而减少后期的调试和修改工作，节省时间和成本。此外，单元测试还可以提高代码的可读性和可维护性，使代码更加易于理解和修改。</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
</search>
