<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.两数之和(C语言)</title>
    <url>/2023/077204.html</url>
    <content><![CDATA[<h1 id="一、题目描述："><a href="#一、题目描述：" class="headerlink" title="一、题目描述："></a>一、题目描述：</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p>
<pre class="line-numbers language-none"><code class="language-none">示例 1： 输入：nums &#x3D; [2,7,11,15], target &#x3D; 9 输出：[0,1] 解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。

示例 2： 输入：nums &#x3D; [3,2,4], target &#x3D; 6 输出：[1,2]

示例 3： 输入：nums &#x3D; [3,3], target &#x3D; 6 输出：[0,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="二、解题方法：暴力枚举"><a href="#二、解题方法：暴力枚举" class="headerlink" title="二、解题方法：暴力枚举"></a>二、解题方法：暴力枚举</h1><p>可能是第一时间想到的方法，遍历nums中的元素x，并在数组中检索是否存在值为target-x的元素，若存在则输出下标。该方法时间复杂度为O(n*2）。</p>
<pre class="line-numbers language-none"><code class="language-none">int* twoSum(int* nums, int numsSize, int target, int* returnSize)&#123;
   for(int i&#x3D;0;i&lt;numsSize;i++)
   &#123;
       
       for(int j&#x3D;i+1;j&lt;numsSize;j++)
       &#123;
           if(nums[j]&#x3D;&#x3D;target-nums[i])
           &#123;
               int* ret&#x3D;malloc(sizeof(int)*2);
               ret[0]&#x3D;i,ret[1]&#x3D;j;
               *returnSize&#x3D;2;
               return ret;
           &#125; 
       &#125;
   &#125;
   *returnSize&#x3D;0;
   return NULL;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode题解</tag>
        <tag>LeetCode</tag>
        <tag>两数之和</tag>
      </tags>
  </entry>
  <entry>
    <title>3.无重复字符的最长子串(C语言)</title>
    <url>/2023/0746254.html</url>
    <content><![CDATA[<h1 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h1><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<blockquote>
<p>示例 1:<br>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:<br>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:<br>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>
</blockquote>
<blockquote>
<p>提示：<br>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 104<br>s 由英文字母、数字、符号和空格组成</p>
</blockquote>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXN1YnN0cmluZy13aXRob3V0LXJlcGVhdGluZy1jaGFyYWN0ZXJz">https://leetcode.cn/problems/longest-substring-without-repeating-characters<i class="fa fa-external-link-alt"></i></span><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><blockquote>
<p>1、使用count记录无重复子串的长度<br>2、start记录当前子串起始位置下标<br>3、max记录最大子串长度<br>4、使用index的值记录当前字符在字符串中的位置坐标<br>5、遍历字符串s<br>6、若字符串无重复字符，返回count，即当前字符串长度<br>7、若有重复字符，则改变子串起始位置start的值为当前字符上一次出现的位置下标<br>8、比较count与max的值，记录最大子串长度。</p>
</blockquote>
<h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>index<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//字符串长度</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>start<span class="token punctuation">)</span>     <span class="token comment">//重复字符的index值大于start</span>
        <span class="token punctuation">&#123;</span>
            count <span class="token operator">=</span> i <span class="token operator">-</span> start<span class="token punctuation">;</span>    <span class="token comment">//计算滑动窗口长度</span>
            start <span class="token operator">=</span> index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//更新起始位置</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">></span>max<span class="token punctuation">)</span>         <span class="token comment">//更新最大长度</span>
            <span class="token punctuation">&#123;</span>
                max <span class="token operator">=</span> count<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            
        <span class="token punctuation">&#125;</span>
        index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//当前字符的位置下标</span>
    <span class="token punctuation">&#125;</span>
    count <span class="token operator">=</span> i <span class="token operator">-</span> start<span class="token punctuation">;</span>       <span class="token comment">//若字符串无重复，则count为最大子串长度</span>
    <span class="token keyword">return</span> count<span class="token operator">></span>max<span class="token operator">?</span>count<span class="token operator">:</span>max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="四、个人记录"><a href="#四、个人记录" class="headerlink" title="四、个人记录"></a>四、个人记录</h1><p>在该题中，花费了较多的时间，在尝试使用滑动窗口解题过程时出现错误。后来借鉴了其他用户的题解过程，并按着自己的理解完成该题。</p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode题解</tag>
        <tag>LeetCode</tag>
        <tag>两数之和</tag>
      </tags>
  </entry>
  <entry>
    <title>2.两数相加(C语言)</title>
    <url>/2023/077402.html</url>
    <content><![CDATA[<h1 id="LeetCode题解-2-两数相加（C语言）"><a href="#LeetCode题解-2-两数相加（C语言）" class="headerlink" title="LeetCode题解-2.两数相加（C语言）"></a>LeetCode题解-2.两数相加（C语言）</h1><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><blockquote>
<p>给你两个<strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
</blockquote>
<p>输入与输出示例如下1所示：</p>
<blockquote>
<p>示例 1：<br>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.</p>
</blockquote>
<blockquote>
<p>示例 2：<br>输入：l1 &#x3D; [0], l2 &#x3D; [0]<br>输出：[0]</p>
</blockquote>
<blockquote>
<p>示例 3：<br>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>
</blockquote>
<h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><blockquote>
<p>在逆序的列表中，每一项直接相加就是该位的值，通过设置一个变量记录进位。对于长度短的数字进行补0，然后相加，将处理后的每一项插入结果链表。<br>1、创建结果链表<br>2、遍历给定的两个链表<br>3、取结点值进行相加，并记录进位值carry，注意短数补0<br>4、遍历结束后，判断进位是否大于0，是则插入结果列表</p>
<p>在实现该题过程中，借鉴了官方的题解，最终按着自己的理解写出该题。</p>
</blockquote>
<h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>L<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>node<span class="token punctuation">;</span>   <span class="token comment">//新建结果链表</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment">//存放进位</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">||</span>l2<span class="token punctuation">)</span>                <span class="token comment">//链表非空继续计算</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> l1 <span class="token operator">?</span>l1<span class="token operator">-></span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//l1的结点非空则取该结点的值否则将该位置0</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> l2 <span class="token operator">?</span>l2<span class="token operator">-></span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>   
        <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span>carry<span class="token punctuation">;</span>   <span class="token comment">//求和</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">)</span>                    <span class="token comment">//如果结果列表为空，则使头指针指向结点node</span>
        <span class="token punctuation">&#123;</span>
            node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            L <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>                     <span class="token comment">//在结果链表后插入结点</span>
        <span class="token punctuation">&#123;</span>
            node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>
            node<span class="token operator">-></span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">//求进位</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>                    <span class="token comment">//l1、l2非空后移</span>
        <span class="token punctuation">&#123;</span>
            l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token comment">//将最后的进位插入链表</span>
    <span class="token punctuation">&#123;</span>
        node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>
        node<span class="token operator">-></span>val <span class="token operator">=</span> carry<span class="token punctuation">;</span>
        node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> L<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="4-个人记录"><a href="#4-个人记录" class="headerlink" title="4.个人记录"></a>4.个人记录</h1><p>在第一次实现中，在进行链表插入时出现错误，导致只能输出第一个数字和最后一个数字。原因则是反复将后续结点插入结果链表的第二个节点位置。导致无法得出正确结果，提交错误。</p>
<img data-src="/2023/077402/7f053c1ad63044d09777ab8286577aff.png" class>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode题解</tag>
        <tag>LeetCode</tag>
        <tag>两数之和</tag>
      </tags>
  </entry>
  <entry>
    <title>9.回文数</title>
    <url>/2023/0715753.html</url>
    <content><![CDATA[<h1 id="1、题目描述"><a href="#1、题目描述" class="headerlink" title="1、题目描述"></a>1、题目描述</h1><blockquote>
<p>题目描述：<br>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。<br>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>例：121是<br>  -121不是</p>
</blockquote>
<h1 id="2、解题思路"><a href="#2、解题思路" class="headerlink" title="2、解题思路"></a>2、解题思路</h1><blockquote>
<p><strong>思路一：</strong><br><em><strong>最初想到是使用java语言，直接将int型变量转为字符串，然后将字符串倒序，比较两个字符串是否相同，若相同则输出true，反之为false</strong></em></p>
</blockquote>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">代码如下所示：
class Solution &#123;
    public boolean isPalindrome(int x) &#123;
        String str &#x3D; Integer.toString(x);
        String s &#x3D; new StringBuffer(str).reverse().toString(); &#x2F;&#x2F;直接逆序字符串
        if(str.equals(s))     &#x2F;&#x2F;比较字符串是否相等
        &#123;
            return true;
        &#125;else&#123;
            return false;
        &#125;
    &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>思路二(C语言）：</strong><br><em><strong>1、由回文数的特性可知，负数均不是回文数，故判断若x为负数直接输出false；<br>2、对于正数则用一个变量记录x的逆序数<br>3、比较两个数是否相等，相等则输出true；反之false<br>4、默认0为回文数</strong></em></p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//将x的逆序数定义为long类型，防止运行过程中因溢出而导致的错误</span>
    <span class="token keyword">int</span> y<span class="token operator">=</span>x<span class="token punctuation">;</span>       <span class="token comment">//记录原始x值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">//逆序x</span>
    <span class="token punctuation">&#123;</span>
        sum <span class="token operator">=</span> sum<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> sum <span class="token operator">==</span> y<span class="token punctuation">;</span> <span class="token comment">//返回bool值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="3、问题记录"><a href="#3、问题记录" class="headerlink" title="3、问题记录"></a>3、问题记录</h1><p>使用C语言实现回文数的过程中，由于将sum变量定义为int类型，导致在LeetCode运行时出现溢出错误，无法通过。后尝试将sum变量改为long类型，成功通过编译。<br>但在解题过程中，未考虑时间复杂度和空间复杂度。</p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>LeetCode题解</tag>
        <tag>LeetCode</tag>
        <tag>回文数</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaBean</title>
    <url>/2023/083310.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>JavaBean是Java编程中的一个概念，它是一种符合特定规范的Java类。JavaBean通常用于封装数据和功能，通过提供公共的getter和setter方法来访问和修改类的属性（成员变量），从而实现面向对象编程的封装特性。</p>
<h1 id="特点和规范"><a href="#特点和规范" class="headerlink" title="特点和规范"></a>特点和规范</h1><p>JavaBean的特点和规范如下：</p>
<ol>
<li>属性（Properties）：JavaBean类通常包含一些私有的成员变量（属性），这些成员变量用于存储对象的数据。</li>
<li>公共的getter和setter方法：JavaBean类为每个属性提供公共的getter方法用于获取属性值，以及setter方法用于设置属性值。这样做的好处是可以对属性进行封装，保护属性的访问和修改，同时可以实现类的数据封装。</li>
<li>无参构造函数：JavaBean类必须提供一个无参的构造函数，以便在实例化对象时使用。</li>
<li>实现Serializable接口（可选）：如果需要对JavaBean对象进行序列化和反序列化（如保存到文件或传输到网络），则可以实现Serializable接口。</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>下面是一个简单的JavaBean类的示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>
                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>
                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用JavaBean示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Alice"</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 30</span>

        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Person&#123;name='Alice', age=31&#125;"</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上面的示例中，<code>Person</code>类符合JavaBean规范，它封装了两个属性<code>name</code>和<code>age</code>，并提供了公共的getter和setter方法。我们可以通过getter和setter方法获取和设置对象的属性值。JavaBean的这种封装特性使得对象的使用更加简单和安全。</p>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaBean</tag>
        <tag>Java核心类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据类型</title>
    <url>/2023/0818833.html</url>
    <content><![CDATA[<h1 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul>
<li>基本类型：<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>boolean</code>，<code>float</code>，<code>double</code>，<code>char</code></li>
<li>引用类型：所有<code>class</code>和<code>interface</code>类型</li>
</ul>
<p><strong>注意</strong>：引用类型可以赋值为null，表示空，但基本类型不能赋值为null，会编译错误</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// compile error!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>基本类型与引用类型的对应关系，如下表所示：</p>
<table>
<thead>
<tr>
<th align="left">基本类型</th>
<th align="left">对应的引用类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean</td>
<td align="left">java.lang.Boolean</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">java.lang.Byte</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">java.lang.Short</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">java.lang.Integer</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">java.lang.Long</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">java.lang.Float</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">java.lang.Double</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">java.lang.Character</td>
</tr>
</tbody></table>
<ul>
<li>Java编译器可以帮助我们自动在<code>int</code>和<code>Integer</code>之间转型：</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 编译器自动使用Integer.valueOf(int)</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// 编译器自动使用Integer.intValue()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>注意：</strong>这种直接把<code>int</code>变为<code>Integer</code>的赋值写法，称为自动装箱（Auto Boxing），反过来，把<code>Integer</code>变为<code>int</code>的赋值写法，称为自动拆箱（Auto Unboxing）。自动装箱和自动拆箱只发生在编译阶段，目的是为了少写代码。</p>
<p>装箱和拆箱会影响代码的执行效率，因为编译后的<code>class</code>代码是严格区分基本类型和引用类型的。并且，自动拆箱执行时可能会报<code>NullPointerException</code>：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment">//基本数据类型不能</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>所有的包装类型都是不变类。</li>
<li>对两个<code>Integer</code>实例进行比较要特别注意：绝对不能用<code>==</code>比较，因为<code>Integer</code>是引用类型，必须使用<code>equals()</code>比较</li>
<li>在Java中，并没有无符号整型（Unsigned）的基本数据类型。<code>byte</code>、<code>short</code>、<code>int</code>和<code>long</code>都是带符号整型，最高位是符号位。无符号整型和有符号整型的转换在Java中就需要借助包装类型的静态方法完成。</li>
</ul>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java零碎知识点记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java知识记录</tag>
      </tags>
  </entry>
  <entry>
    <title>React安装教程</title>
    <url>/2023/0740161.html</url>
    <content><![CDATA[<h1 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h1><ul>
<li>安装本地React环境需要Node.js，如果具有Node环境跳过即可。</li>
<li>如果没有安装则可参考该篇文章安装Node环境，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkxNTY0Ny9hcnRpY2xlL2RldGFpbHMvMTMxMzQ0NzUyP3NwbT0xMDAxLjIwMTQuMzAwMS41NTAx">点击查看<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="二、React安装"><a href="#二、React安装" class="headerlink" title="二、React安装"></a>二、React安装</h1><ol>
<li>全局安装React</li>
</ol>
<ul>
<li><p>首先打开命令行，建议以管理员身份</p>
</li>
<li><p>输入命令：<code>npm install -g create-react-app</code></p>
<img data-src="/2023/0740161/effc4615f0c046f6b07ad6dd6d3a8f35.png" class title="[title]"></li>
</ul>
<ol start="2">
<li><p>安装完成后，输入命令<code>create-react-app -V</code>查看时候成功</p>
 <img data-src="/2023/0740161/effc4615f0c046f6b07ad6dd6d3a8f35.png" class>
</li>
<li><p>创建React项目<br> 在自己选定的目录下输入命令：<code>create-react-app reactdemo</code>进行创建项目，注意reactdemo为自己命名的项目名。</p>
</li>
</ol>
  <img data-src="/2023/0740161/ef2ead85b53842058461b3954832c502.png" class>
<p>  如上则成功创建一个新的react项目。</p>
<ol start="4">
<li>运行react项目<br> 首先进入刚才创建的项目的根目录下，然后输入命令<code>npm start</code></li>
</ol>
  <img data-src="/2023/0740161/ddba23821fd14cdc9acd9670f03f88ac.png" class>

<ol start="5">
<li>运行成功后的界面，如图所示</li>
</ol>
  <img data-src="/2023/0740161/756bcf1f59fe449aa2d6c65bad2fd57f.png" class>


<ol start="6">
<li>之后可以通过自己安装的IDE打开该项目，进行编写了。</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>String字符串拼接</title>
    <url>/2023/0765346.html</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>对于String来说是不可变的，使用+修改字符串是在不断地创建新的字符串对象，而不是在原有的对象上修改的。并且对于字符串的修改和拼接通常提供StringBuffer和StringBuilder，以及使用的String.join()方法，具体如下所示。</p>
<h1 id="二、StringBuilder"><a href="#二、StringBuilder" class="headerlink" title="二、StringBuilder"></a>二、StringBuilder</h1><h2 id="1、StringBuilder介绍"><a href="#1、StringBuilder介绍" class="headerlink" title="1、StringBuilder介绍"></a>1、StringBuilder介绍</h2><p><strong>StringBuilder</strong>是Java中的一个类，用于处理可变的字符串。它的设计目的是在进行频繁的字符串操作时，<strong>避免创建多个不可变的<code>String</code>对象，从而提高字符串的处理效率</strong>。<code>StringBuilder</code>类位于<code>java.lang</code>包中，无需额外导入就可以直接使用。</p>
<h2 id="2、使用说明"><a href="#2、使用说明" class="headerlink" title="2、使用说明"></a>2、使用说明</h2><ol>
<li>创建<code>StringBuilder</code>对象：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>添加字符串：</li>
</ol>
<p>使用<code>append()</code>方法在<code>StringBuilder</code>末尾添加字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>或者使用链式调用：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>插入字符串：</li>
</ol>
<p>使用<code>insert()</code>方法在指定位置插入字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ”wuhaha“<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>删除字符串：</li>
</ol>
<p>使用<code>delete()</code>方法删除指定范围内的字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>替换字符串：</li>
</ol>
<p>使用<code>replace()</code>方法替换指定范围内的字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="6">
<li>反转字符串：</li>
</ol>
<p>使用<code>reverse()</code>方法反转<code>StringBuilder</code>中的内容。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="7">
<li>获取字符串：</li>
</ol>
<p>使用<code>toString()</code>方法将<code>StringBuilder</code>转换为一个不可变的<code>String</code>对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="8">
<li>获取当前容量和长度：</li>
</ol>
<p><code>capacity()</code>方法返回当前<code>StringBuilder</code>的容量（可容纳字符的最大数量）。 <code>length()</code>方法返回当前<code>StringBuilder</code>中实际包含的字符数。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> capacity <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="9">
<li>设置容量：</li>
</ol>
<p>使用<code>ensureCapacity()</code>方法设置<code>StringBuilder</code>的容量。这样可以提前分配足够的空间，避免频繁地扩容，提高性能。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置容量为100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="10">
<li>清空<code>StringBuilder</code>：</li>
</ol>
<p>使用<code>setLength()</code>方法将<code>StringBuilder</code>的长度设置为0，清空其中的内容。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>StringBuilder</code>是非线程安全的，如果在多线程环境下使用，建议使用<code>StringBuffer</code>类，它与<code>StringBuilder</code>类功能相似，但是线程安全。通常情况下，如果不涉及多线程操作，推荐使用<code>StringBuilder</code>，因为它的性能更好,速度也更快一些。</p>
<h1 id="三、StringBuffer"><a href="#三、StringBuffer" class="headerlink" title="三、StringBuffer"></a>三、StringBuffer</h1><p><code>StringBuffer</code>是Java中用于处理可变字符串的类，它与<code>StringBuilder</code>类似，但是具有线程安全的特性。<code>StringBuffer</code>类位于<code>java.lang</code>包中，无需额外导入就可以直接使用。</p>
<p>以下是<code>StringBuffer</code>的详细使用说明：</p>
<ol>
<li><p>创建<code>StringBuffer</code>对象：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>添加字符串：</p>
<p>使用<code>append()</code>方法在<code>StringBuffer</code>末尾添加字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>或者使用链式调用：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>插入字符串：</p>
<p>使用<code>insert()</code>方法在指定位置插入字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">" beautiful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除字符串：</p>
<p>使用<code>delete()</code>方法删除指定范围内的字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>替换字符串：</p>
<p>使用<code>replace()</code>方法替换指定范围内的字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>反转字符串：</p>
<p>使用<code>reverse()</code>方法反转<code>StringBuffer</code>中的内容。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>获取字符串：</p>
<p>使用<code>toString()</code>方法将<code>StringBuffer</code>转换为一个不可变的<code>String</code>对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>获取当前容量和长度：</p>
<p><code>capacity()</code>方法返回当前<code>StringBuffer</code>的容量（可容纳字符的最大数量）。 <code>length()</code>方法返回当前<code>StringBuffer</code>中实际包含的字符数。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> capacity <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>设置容量：</p>
<p>使用<code>ensureCapacity()</code>方法设置<code>StringBuffer</code>的容量。这样可以提前分配足够的空间，避免频繁地扩容，提高性能。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置容量为100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>清空<code>StringBuffer</code>：</p>
<p>使用<code>setLength()</code>方法将<code>StringBuffer</code>的长度设置为0，清空其中的内容。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p><code>StringBuffer</code>是线程安全的，适用于多线程环境下的字符串操作。但是在单线程环境下，如果没有特殊需求，推荐使用<code>StringBuilder</code>，因为它的性能更好。除非确实需要线程安全，否则<code>StringBuilder</code>通常更适合日常使用。</p>
<h1 id="四、StringJoiner"><a href="#四、StringJoiner" class="headerlink" title="四、StringJoiner"></a>四、StringJoiner</h1><p><code>StringJoiner</code>是Java中用于拼接字符串的类，它提供了一种简单的方法来连接多个字符串，并可以在字符串之间添加分隔符。<code>StringJoiner</code>类位于<code>java.util</code>包中，需要导入使用。</p>
<p>以下是<code>StringJoiner</code>的详细使用说明：</p>
<ol>
<li><p>创建<code>StringJoiner</code>对象：</p>
<p>构造函数接收两个参数：分隔符（delimiter）和可选的前缀（prefix）和后缀（suffix）。分隔符是必需的，而前缀和后缀是可选的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringJoiner</span> sj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面的例子表示使用逗号作为分隔符，同时在拼接的结果字符串前后分别添加方括号 <code>[</code> 和 <code>]</code>。</p>
</li>
<li><p>添加字符串：</p>
<p>使用<code>add()</code>方法向<code>StringJoiner</code>中添加字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这将在分隔符之间拼接字符串，并自动处理分隔符的添加。</p>
</li>
<li><p>获取拼接结果：</p>
<p>使用<code>toString()</code>方法获取最终的拼接结果。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> sj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最终的结果将是 <code>&quot;[apple,orange,banana]&quot;</code>。</p>
</li>
<li><p>设置空值替换：</p>
<p>使用<code>setEmptyValue()</code>方法设置当<code>StringJoiner</code>没有任何元素时返回的默认值。默认情况下，<code>StringJoiner</code>没有任何元素时返回空字符串。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sj<span class="token punctuation">.</span><span class="token function">setEmptyValue</span><span class="token punctuation">(</span><span class="token string">"No fruits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置默认值为 "No fruits"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果在没有添加任何字符串的情况下调用<code>toString()</code>方法，将返回设置的默认值。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> sj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果没有添加任何元素，将返回 "No fruits"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p><code>StringJoiner</code>类提供了一种简单而灵活的方式来拼接字符串，并可以很方便地在每个字符串之间添加分隔符和前后缀。它特别适合于需要构建带有分隔符的字符串，如CSV文件、JSON数组等。</p>
<h1 id="五、String-Join"><a href="#五、String-Join" class="headerlink" title="五、String.Join()"></a>五、String.Join()</h1><p><code>String.join()</code>是Java中<code>String</code>类提供的静态方法，用于将多个字符串按照指定的分隔符连接成一个单一的字符串。<code>String.join()</code>方法在Java 8及更高版本中引入，相比于早期版本中的<code>StringUtils.join()</code>或<code>StringBuffer</code>&#x2F;<code>StringBuilder</code>的操作，更加简洁和方便。</p>
<p>以下是<code>String.join()</code>的详细使用说明：</p>
<ol>
<li><p>使用<code>String.join()</code>：</p>
<p><code>String.join()</code>方法接收两个参数：分隔符（delimiter）和要连接的多个字符串（Iterable、数组等）。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> delimiter <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的例子表示使用逗号作为分隔符，将字符串 <code>&quot;apple&quot;</code>、<code>&quot;orange&quot;</code> 和 <code>&quot;banana&quot;</code> 连接成一个字符串。最终的结果将是 <code>&quot;apple,orange,banana&quot;</code>。</p>
</li>
<li><p>使用数组作为参数：</p>
<p><code>String.join()</code>方法也可以接收一个字符串数组作为参数。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> delimiter <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"2019"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> date <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面的例子使用连字符（<code>-</code>）作为分隔符，将字符串数组 <code>array</code> 中的元素连接成一个日期字符串。最终的结果将是 <code>&quot;2019-08-31&quot;</code>。</p>
</li>
<li><p>使用Iterable作为参数：</p>
<p><code>String.join()</code>方法还可以接收一个<code>Iterable</code>对象作为参数，例如<code>List</code>、<code>Set</code>等。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> delimiter <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> words <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"awesome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sentence <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面的例子使用空格作为分隔符，将<code>List</code>对象 <code>words</code> 中的元素连接成一个句子。最终的结果将是 <code>&quot;Java is awesome&quot;</code>。</p>
</li>
</ol>
<p><code>String.join()</code>方法非常简单易用，它提供了一种快速拼接字符串的方式，特别适用于需要在多个字符串之间添加分隔符的场景，如拼接CSV数据、构建URL等。</p>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>StringBuilder</tag>
        <tag>java</tag>
        <tag>StringBuffer</tag>
        <tag>join</tag>
        <tag>字符串拼接</tag>
      </tags>
  </entry>
  <entry>
    <title>Java字符串</title>
    <url>/2023/07689.html</url>
    <content><![CDATA[<h1 id="一、java核心类"><a href="#一、java核心类" class="headerlink" title="一、java核心类"></a>一、java核心类</h1><h2 id="1、字符串"><a href="#1、字符串" class="headerlink" title="1、字符串"></a>1、字符串</h2><h3 id="1-1字符串知识点"><a href="#1-1字符串知识点" class="headerlink" title="1.1字符串知识点"></a>1.1字符串知识点</h3><ol>
<li><p>String是一个引用类型，本身也是一个<code>class</code>。</p>
</li>
<li><p>字符串在String内部是以字符数组char[]表示的</p>
</li>
<li><p>写法1：<code>String s=&quot;xiaozhang&quot;;</code></p>
</li>
<li><p>写法2：<code>String s= new String(new char[] &#123;&#39;c&#39;,&#39;z&#39;&#125;);</code></p>
</li>
<li><p>Java字符串的特点：字符串不可变。因为其内部的<code>private final char[],</code>以及没有提供修改的方法。</p>
</li>
<li><p>平时所使用的修改字符串是引用的改变,当创建一个新的字符串时，编译器会先检查在常量池中是否已存在该字符串，若存在则直接使用该字符串的使用；不存在则直接新建一个。</p>
</li>
<li><p>由于字符串的不可变，因此对字符串的改变是创建一个新字符串或者是改变引用。</p>
</li>
<li><p>对于字符串的比较，需要使用**equals()**方法，切记不要使&#x3D;&#x3D;，因为对于引用类型的变量使用&#x3D;&#x3D;进行比较，比较的是对象的引用。当使用&#x3D;&#x3D;运算符比较两个字符串时，它会检查两个字符串对象的引用是否指向相同的内存地址，而不会比较它们的内容。这意味着即使两个字符串的内容相同，它们可能并不指向相同的内存地址，因此使用<code>==</code>运算符进行比较会得到错误的结果。</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token string">"HELLO"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于上面的代码，使用&#x3D;&#x3D;比较两个字符串会输出false，虽然两个字符串内容一样，但由于两个变量的引用不同，所以两个变量是不相等的。</p>
<h3 id="1-2字符串常用方法"><a href="#1-2字符串常用方法" class="headerlink" title="1.2字符串常用方法"></a>1.2字符串常用方法</h3><ol>
<li><p>equals()：判断字符串是否相等</p>
</li>
<li><p>equalsIgnoreCase()：忽略大小写比较字符串</p>
</li>
<li><p>contains(str)：判断字符串是否具有str子串，例如<code>&quot;Hello&quot;.contains(&quot;ll&quot;); // true</code></p>
</li>
<li><p>indexOf(i)：根据字符串索引位置获取字符，<code>eg：&quot;Hello&quot;.indexOf(&quot;l&quot;); // 2</code></p>
</li>
<li><p>lastIndexOf(ch)：获取字符串中字符ch最后一次出现的索引位置，<code>eg:&quot;Hello&quot;.lastIndexOf(&quot;l&quot;); // 3</code></p>
</li>
<li><p>startsWith(str)：判断字符串是否以字串str开头，<code>eg:&quot;Hello&quot;.startsWith(&quot;He&quot;); // true</code></p>
</li>
<li><p>endsWith(str)：判断字符串是否以字串str结尾，<code>eg:&quot;Hello&quot;.endsWith(&quot;lo&quot;); // true</code></p>
</li>
<li><p>substring(): 根据索引位置进行提取字串，索引从0开始。如果只有一个参数，则从该位置截取字符串，获取后半部分；如果有两个参数，则截取两个位置间的字串，包括两个位置。</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">eg<span class="token operator">:</span>
<span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "llo"</span>
<span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"ll"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<ol start="9">
<li><p>trim()：去除字符串首尾两端的空格，trim(): 仅去除字符串首尾的空格字符（ASCII码为32的字符）</p>
</li>
<li><p>strip()：去除字符串首尾两端的空格，包括中文的空格字符，包括空格、制表符、换行符等 Unicode 空白字符</p>
</li>
<li><p>isEmpty()：判断字符串是否为空</p>
</li>
<li><p>isBlank():判断字符串是否是空格组成的字符串</p>
</li>
<li><p>replace(s1，s2):替换字符串，将字符串中的s1全部替换为s2 ，<code>“hello”.replace(&#39;l&#39;, &#39;w&#39;); // &quot;hewwo&quot;，所有字符&#39;l&#39;被替换为&#39;w&#39;</code></p>
</li>
<li><p>replaceAll(regex,replacement):使用正则表达式替换字符串，regex为正则表达式，将符合正则表达式的字符串替换为replacement字符串</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"A,,B;C ,D"</span><span class="token punctuation">;</span><span class="token comment">//将一个或连续多个， ；或者空白字符替换为，</span>
s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[\\,\\;\\s]+"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "A,B,C,D"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="15">
<li>split(ch):根据ch将字符串分割为字符串数组</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"A,B,C,D"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;"A", "B", "C", "D"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="16">
<li>join():拼接字符串,将多个字符串按照指定的分隔符连接成一个单一的字符串</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"***"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "A***B***C"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>另外可以使用加号+来拼接字符串</p>
<ol start="17">
<li>format()和formatted():用于用参数替换字符串中的占位符，两者作用相同，用法不同</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hi %s, your look so %s!"</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token string">"xiaozhang"</span><span class="token punctuation">,</span> <span class="token string">"handsome"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hi %s, your are  %d! years old"</span><span class="token punctuation">,</span> <span class="token string">"xiaozhang"</span><span class="token punctuation">,</span><span class="token number">88</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>以下是几个常用的占位符：</p>
<ul>
<li><code>%s</code>：显示字符串；</li>
<li><code>%d</code>：显示整数；</li>
<li><code>%x</code>：显示十六进制整数；</li>
<li><code>%f</code>：显示浮点数。</li>
</ul>
<ol start="18">
<li>valueOf(): 将其他类型的变量转为字符串</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "123"</span>
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">12.344</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "45.67"</span>
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="19">
<li>toCharArray():将字符串转为字符数组，也可将字符数组转为字符串，示例如下：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String -> char[]</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char[] -> String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>结果如下所示：</p>
<img data-src="/2023/07689/image-20230731152042611.png" class>	
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java核心类</tag>
        <tag>字符串</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举类</title>
    <url>/2023/088398734e.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Java枚举类是一种特殊类型的类，它代表一组常量值，通常用于表示固定的、预定义的一组值。枚举类在Java中是一种非常有用的数据类型，它提供了更好的可读性和类型安全性，比起使用普通常量或整数等数据类型更具优势。在Java中，枚举类是通过<code>enum</code>关键字定义的。</p>
<h1 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h1><p>以下是Java枚举类的详细知识：</p>
<ol>
<li><p>定义枚举类：</p>
<p>通过<code>enum</code>关键字可以定义一个枚举类。枚举类的实例是常量，通常用大写字母表示。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">&#123;</span>
    <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>枚举常量：</p>
<p>在枚举类中定义的常量称为枚举常量，它们是枚举类的实例。每个枚举常量都是唯一的，代表了枚举类中的一个固定值。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Day</span> today <span class="token operator">=</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>枚举方法：</p>
<p>枚举类可以定义方法，可以在枚举常量中为每个值添加自定义的行为。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">&#123;</span>
    <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token string">"Monday"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">TUESDAY</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token string">"Tuesday"</span><span class="token punctuation">;</span>
            <span class="token comment">// 其他枚举常量的处理</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token string">"Unknown"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>枚举构造函数和字段：</p>
<p>枚举类可以有构造函数，但构造函数只能是私有的。枚举常量在定义时就会调用私有构造函数来创建实例。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Day</span> <span class="token punctuation">&#123;</span>
    <span class="token function">MONDAY</span><span class="token punctuation">(</span><span class="token string">"Mon"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TUESDAY</span><span class="token punctuation">(</span><span class="token string">"Tue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WEDNESDAY</span><span class="token punctuation">(</span><span class="token string">"Wed"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">THURSDAY</span><span class="token punctuation">(</span><span class="token string">"Thu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FRIDAY</span><span class="token punctuation">(</span><span class="token string">"Fri"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SATURDAY</span><span class="token punctuation">(</span><span class="token string">"Sat"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUNDAY</span><span class="token punctuation">(</span><span class="token string">"Sun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> abbreviation<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Day</span><span class="token punctuation">(</span><span class="token class-name">String</span> abbreviation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>abbreviation <span class="token operator">=</span> abbreviation<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAbbreviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> abbreviation<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用枚举类：</p>
<p>可以通过枚举常量来访问枚举类的成员。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Day</span> today <span class="token operator">=</span> <span class="token class-name">Day</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "MONDAY"</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getDayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Monday"</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getAbbreviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "Mon"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>枚举的其他特性：</p>
<ul>
<li>枚举类可以实现接口，让枚举常量具有接口中定义的行为。</li>
<li>可以在枚举类中定义抽象方法，然后为每个枚举常量提供具体实现。</li>
<li>枚举类可以用在<code>switch</code>语句中，代替常规的整数或字符型数据。</li>
</ul>
</li>
</ol>
<p>总结来说，Java枚举类是一种非常方便的数据类型，可以帮助我们定义一组固定的常量值，并为每个值提供自定义的行为。使用枚举类可以使代码更加清晰、可读，并提高代码的类型安全性。</p>
]]></content>
      <categories>
        <category>Java教程</category>
        <category>Java核心类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>枚举</tag>
        <tag>Java枚举类</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/0716107.html</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation<i class="fa fa-external-link-alt"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting<i class="fa fa-external-link-alt"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub<i class="fa fa-external-link-alt"></i></span>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
