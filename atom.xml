<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Resmino&#39;s Blog</title>
  
  <subtitle>小张的爬行笔记</subtitle>
  <link href="https://resmino.github.io/atom.xml" rel="self"/>
  
  <link href="https://resmino.github.io/"/>
  <updated>2023-08-10T07:28:43.879Z</updated>
  <id>https://resmino.github.io/</id>
  
  <author>
    <name>Resmino</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows配置本地Tomcat</title>
    <link href="https://resmino.github.io/2023/08e1be8faa.html"/>
    <id>https://resmino.github.io/2023/08e1be8faa.html</id>
    <published>2023-08-10T07:20:15.000Z</published>
    <updated>2023-08-10T07:28:43.879Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/Windows%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0Tomcat/image-20230810152842345.png" alt="image-20230810152842345"></p>]]></content>
    
    
    <summary type="html">Windows配置本地Tomcat</summary>
    
    
    
    <category term="OS" scheme="https://resmino.github.io/categories/OS/"/>
    
    <category term="Windows" scheme="https://resmino.github.io/categories/OS/Windows/"/>
    
    
    <category term="Tomcat" scheme="https://resmino.github.io/tags/Tomcat/"/>
    
    <category term="Windows配置本地Tomcat" scheme="https://resmino.github.io/tags/Windows%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Ubantu安装Git</title>
    <link href="https://resmino.github.io/2023/08189e9baf.html"/>
    <id>https://resmino.github.io/2023/08189e9baf.html</id>
    <published>2023-08-09T11:56:02.000Z</published>
    <updated>2023-08-10T07:23:21.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><ol><li>在ubantu系统中打开终端，然后终端输入：sudo apt-get install git,</li></ol><p><img data-src="/Ubantu%E5%AE%89%E8%A3%85Git/image-20230809202614985.png" alt="image-20230809202614985"></p><ol start="2"><li>这是由于update 包的问题，终端输入：sudo apt-get update</li></ol><p><img data-src="/Ubantu%E5%AE%89%E8%A3%85Git/image-20230809202728309.png" alt="image-20230809202728309"></p><ol start="3"><li>重新输入命令：sudo apt-get install git,</li></ol><p><img data-src="/Ubantu%E5%AE%89%E8%A3%85Git/image-20230809202827258.png" alt="image-20230809202827258"></p><ol start="4"><li>配置全局用户和邮箱</li></ol><p><img data-src="/Ubantu%E5%AE%89%E8%A3%85Git/image-20230809203250197.png" alt="image-20230809203250197"></p><ol start="5"><li>生成ssh密钥</li></ol><p><img data-src="/Ubantu%E5%AE%89%E8%A3%85Git/image-20230809203553948.png" alt="image-20230809203553948"></p><ol start="6"><li>使用命令打开生成的公钥</li></ol><p><img data-src="/Ubantu%E5%AE%89%E8%A3%85Git/image-20230809204659620.png" alt="image-20230809204659620"></p><p>复制公钥粘贴到github即可</p>]]></content>
    
    
    <summary type="html">Ubantu安装Git</summary>
    
    
    
    <category term="OS" scheme="https://resmino.github.io/categories/OS/"/>
    
    <category term="Linux" scheme="https://resmino.github.io/categories/OS/Linux/"/>
    
    <category term="Ubuntu" scheme="https://resmino.github.io/categories/OS/Linux/Ubuntu/"/>
    
    
    <category term="git" scheme="https://resmino.github.io/tags/git/"/>
    
    <category term="Linux" scheme="https://resmino.github.io/tags/Linux/"/>
    
    <category term="ubantu安装git" scheme="https://resmino.github.io/tags/ubantu%E5%AE%89%E8%A3%85git/"/>
    
  </entry>
  
  <entry>
    <title>VMware安装CentOS7</title>
    <link href="https://resmino.github.io/2023/085461b859.html"/>
    <id>https://resmino.github.io/2023/085461b859.html</id>
    <published>2023-08-09T05:48:16.000Z</published>
    <updated>2023-08-10T05:19:22.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h1><ol><li>打开VMware，选择新建虚拟机，选择典型模式</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809135215411.png" alt="image-20230809135215411"></p><ol start="2"><li>选择稍后安装操作系统</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809135238915.png" alt="image-20230809135238915"></p><ol start="3"><li>选择Linux系统，CentOS 7 64位版本</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809135316221.png" alt="image-20230809135316221"></p><ol start="4"><li>自定义虚拟机名字，然后选择虚拟机安装位置，不建议C盘</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809135509884.png" alt="image-20230809135509884"></p><ol start="5"><li>选择磁盘大小，默认20G，看个人需要以及硬盘空间</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809135543815.png" alt="image-20230809135543815"></p><ol start="6"><li>选择自定义硬件</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809135630182.png" alt="image-20230809135630182"></p><ol start="7"><li>在新CD这一栏选择自己下载的镜像文件</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809135618396.png" alt="image-20230809135618396"></p><h1 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h1><ol><li>启动虚拟机，选择安装，等待安装完成</li><li>选择自己惯用的语言，我这里选择了英语</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809140001581.png" alt="image-20230809140001581"></p><ol start="3"><li>点击设置时区，上海</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809140138202.png" alt="image-20230809140138202"></p><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809140118432.png" alt="image-20230809140118432"></p><ol start="4"><li>软件选择Ghome Desktop，这样安装的会有图形化界面，最小安装的话，只能通过命令行进行操作，如果对linux不是很熟悉的话，后面通过命令行安装可能会出现问题。</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809145004677.png" alt="image-20230809145004677"></p><ol start="5"><li>点击系统分区</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809145623475.png" alt="image-20230809145623475"></p><ol start="6"><li>选择Standard Partition</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809145530459.png" alt="image-20230809145530459"></p><ol start="7"><li>点击+号，新建<code>/boot</code>分区，空间500M就够了</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809150029319.png" alt="image-20230809150029319"></p><ol start="8"><li>新建swap分区，2G或者4G,或者更小都可以</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809150259087.png" alt="image-20230809150259087"></p><ol start="9"><li>剩余的全分给根分区：<code>/</code></li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809150338332.png" alt="image-20230809150338332"></p><ol start="10"><li>点击开始安装</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809150420042.png" alt="image-20230809150420042"></p><ol start="11"><li>设置root用户密码，并新建一个普通用户设置密码</li></ol><p><img data-src="/VMware%E5%AE%89%E8%A3%85CentOS7/image-20230809150504268.png" alt="image-20230809150504268"></p><ol start="12"><li>之后等待安装完成后重启即可。</li></ol>]]></content>
    
    
    <summary type="html">VMware安装CentOS7</summary>
    
    
    
    <category term="OS" scheme="https://resmino.github.io/categories/OS/"/>
    
    <category term="Linux" scheme="https://resmino.github.io/categories/OS/Linux/"/>
    
    <category term="CentOS7" scheme="https://resmino.github.io/categories/OS/Linux/CentOS7/"/>
    
    
    <category term="CentOS7" scheme="https://resmino.github.io/tags/CentOS7/"/>
    
    <category term="VMware" scheme="https://resmino.github.io/tags/VMware/"/>
    
    <category term="VMware17" scheme="https://resmino.github.io/tags/VMware17/"/>
    
    <category term="VWware安装CentOS7" scheme="https://resmino.github.io/tags/VWware%E5%AE%89%E8%A3%85CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>VMware 17新建Ubuntu虚拟机</title>
    <link href="https://resmino.github.io/2023/083b29be45.html"/>
    <id>https://resmino.github.io/2023/083b29be45.html</id>
    <published>2023-08-09T00:22:39.000Z</published>
    <updated>2023-08-09T05:46:27.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建Ubuntu虚拟机"><a href="#新建Ubuntu虚拟机" class="headerlink" title="新建Ubuntu虚拟机"></a>新建Ubuntu虚拟机</h1><ol><li>打开VMware，点击<strong>创建新的虚拟机</strong></li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809085233387.png" alt="image-20230809085233387"></p><ol start="2"><li>点击新建之后，选择推荐的典型创建模式，然后点击下一步这样的配置简单，也能满足不是专门搞Linux的用户的需要（如果需要自定义的，可以直接换教程了）</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809093448804.png" alt="image-20230809093448804"></p><ol start="3"><li>选择稍后安装，点击下一步</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809093737956.png" alt="image-20230809093737956"></p><ol start="4"><li>选择操作系统和Ubuntu版本，我下载的是Ubuntu64位</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809093857833.png" alt="image-20230809093857833"></p><ol start="5"><li>自定义虚拟机名称，然后选择虚拟机安装位置，不建议安装C盘，除非你觉得C盘空间够大</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809094118960.png" alt="image-20230809094118960"></p><ol start="6"><li>选择磁盘大小，默认是20G，如果空间足够可以多分配一些，并且并不是你分配了多少，虚拟机就直接占用了这么多，就像你的D盘，分配这么大空间，表示有这么大空间可用。</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809094345105.png" alt="image-20230809094345105"></p><ol start="7"><li>点击自定义硬件，配置虚拟机的硬件以及配置之前下载好的Ubuntu镜像文件</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809094653546.png" alt="image-20230809094653546"></p><ol start="8"><li>根据自己需要配置处理器数量和核数，不知道怎么配置，默认即可，这个后续也可以根据自己需要配置。</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809095012769.png" alt="image-20230809095012769"></p><ol start="9"><li><p>然后点击完成，等待创建完成</p></li><li><p>点击启动虚拟机</p></li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809095215283.png" alt="image-20230809095215283"></p><h1 id="配置Ubuntu虚拟机"><a href="#配置Ubuntu虚拟机" class="headerlink" title="配置Ubuntu虚拟机"></a>配置Ubuntu虚拟机</h1><ol><li>启动虚拟机后，选择自己惯用的语言，我这里直接选择英文了，中文需要一直下滑到语言栏的最后。之后点击install Ubuntu</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809111652246.png" alt="image-20230809111652246"></p><ol start="2"><li>选择语言，点击continue</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809112106373.png" alt="image-20230809112106373"></p><ol start="3"><li>选择常规安装，其他选项，可以勾选安装时下载更新</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809112602535.png" alt="image-20230809112602535"></p><ol start="4"><li>提示，当前电脑没有检测到操作系统。选择清除磁盘，并安装ubantu，这里的警告提醒你会删除所有程序，文档之类的数据。点击install now即可。</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809113014798.png" alt="image-20230809113014798"></p><ol start="5"><li>点击continue</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809113621624.png" alt="image-20230809113621624"></p><ol start="6"><li>选择上海，大陆选择上海就行</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809113723910.png" alt="image-20230809113723910"></p><ol start="7"><li>输入个人信息。如果不想要每次都密码登录，也没啥重要的数据，可以选择自动登录</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809114020684.png" alt="image-20230809114020684"></p><ol start="8"><li>等待安装完成即可</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809114148356.png" alt="image-20230809114148356"></p><ol start="9"><li>安装完成后，系统显示的是小屏居中</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809120637210.png" alt="image-20230809120637210"></p><ol start="10"><li>进入系统，选择设置，选择displays,然后选择分辨率，即可</li></ol><p><img data-src="/VWware-17%E6%96%B0%E5%BB%BAUbuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20230809134434649.png" alt="image-20230809134434649"></p>]]></content>
    
    
    <summary type="html">VMware17新建Ubuntu虚拟机</summary>
    
    
    
    <category term="OS" scheme="https://resmino.github.io/categories/OS/"/>
    
    <category term="Linux" scheme="https://resmino.github.io/categories/OS/Linux/"/>
    
    <category term="Ubuntu" scheme="https://resmino.github.io/categories/OS/Linux/Ubuntu/"/>
    
    
    <category term="VMware" scheme="https://resmino.github.io/tags/VMware/"/>
    
    <category term="VMware17" scheme="https://resmino.github.io/tags/VMware17/"/>
    
    <category term="Ubantu" scheme="https://resmino.github.io/tags/Ubantu/"/>
    
    <category term="VWware安装Ubuntu" scheme="https://resmino.github.io/tags/VWware%E5%AE%89%E8%A3%85Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>2023 Win11安装VMware17教程</title>
    <link href="https://resmino.github.io/2023/0862f5c0d6.html"/>
    <id>https://resmino.github.io/2023/0862f5c0d6.html</id>
    <published>2023-08-07T08:28:33.853Z</published>
    <updated>2023-08-09T05:46:50.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudm13YXJlLmNvbS9jbi9wcm9kdWN0cy93b3Jrc3RhdGlvbi1wcm8vd29ya3N0YXRpb24tcHJvLWV2YWx1YXRpb24uaHRtbA==">点击下载<i class="fa fa-external-link-alt"></i></span></p><p>点击上面的链接跳转官网后，下滑，找到如下所示：</p><img data-src="/2023/0862f5c0d6/image-20230808105650652.png" class><p>选择自己的系统点击下载即可。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="双击安装程序"><a href="#双击安装程序" class="headerlink" title="双击安装程序"></a>双击安装程序</h2><img data-src="/2023/0862f5c0d6/image-20230807163026853.png" class><ol><li>点击下一步</li></ol><img data-src="/2023/0862f5c0d6/image-20230807164035349.png" class><ol start="2"><li>接受协议，点击下一步</li></ol><img data-src="/2023/0862f5c0d6/image-20230807164150103.png" class><ol start="3"><li>勾选</li></ol><img data-src="/2023/0862f5c0d6/image-20230807164246939.png" class><ol start="4"><li>对于用户体验设置，根据自己的喜好选择，或者默认勾选即可，如下所示</li></ol><img data-src="/2023/0862f5c0d6/image-20230807164304200.png" class><ol start="5"><li>选择快捷方式，根据自己的的喜好选择即可，我是因为不想吧所有的东西都放在桌面，所以没有勾选，如下所示</li></ol><img data-src="/2023/0862f5c0d6/image-20230807164319161.png" class><ol start="6"><li>点击下一步，然后开始安装，等待安装完成即可，过程中可能需要重启电脑</li></ol>]]></content>
    
    
    <summary type="html">VMware17 安装教程</summary>
    
    
    
    <category term="OS" scheme="https://resmino.github.io/categories/OS/"/>
    
    <category term="Linux" scheme="https://resmino.github.io/categories/OS/Linux/"/>
    
    <category term="VMware" scheme="https://resmino.github.io/categories/OS/Linux/VMware/"/>
    
    
    <category term="VMwarePro" scheme="https://resmino.github.io/tags/VMwarePro/"/>
    
    <category term="VMware虚拟机安装" scheme="https://resmino.github.io/tags/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>94. 二叉树的中序遍历</title>
    <link href="https://resmino.github.io/2023/085b2d6749.html"/>
    <id>https://resmino.github.io/2023/085b2d6749.html</id>
    <published>2023-08-07T06:13:36.000Z</published>
    <updated>2023-08-09T00:38:32.230Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Problem</strong>: <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktdHJlZS1pbm9yZGVyLXRyYXZlcnNhbC9kZXNjcmlwdGlvbi8=">94. 二叉树的中序遍历<i class="fa fa-external-link-alt"></i></span></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>看到该题目的第一想法就是使用递归解题。对于二叉树的中序遍历，中序是指根节点的读取顺序，首先读取的是左子节点的值，因此先读取左节点，然后根节点，最后右节点，使用递归实现较为简单。后来参考题解的迭代解法。</p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h2><ul><li>代码如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node <span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h2><p>这里迭代的实现是看官方题解的思路，使用了java中的双端队列Deque</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> de <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>de<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                de<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            root <span class="token operator">=</span> de<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">LeetCode-94. 二叉树的中序遍历题解</summary>
    
    
    
    <category term="LeetCode题解" scheme="https://resmino.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Java" scheme="https://resmino.github.io/tags/Java/"/>
    
    <category term="leetcode" scheme="https://resmino.github.io/tags/leetcode/"/>
    
    <category term="LeetCode" scheme="https://resmino.github.io/tags/LeetCode/"/>
    
    <category term="leetcode题解" scheme="https://resmino.github.io/tags/leetcode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java中双端队列Deque的用法</title>
    <link href="https://resmino.github.io/2023/08fb4d2731.html"/>
    <id>https://resmino.github.io/2023/08fb4d2731.html</id>
    <published>2023-08-07T03:54:56.000Z</published>
    <updated>2023-08-09T00:38:32.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Deque介绍"><a href="#Deque介绍" class="headerlink" title="Deque介绍"></a>Deque介绍</h1><p>在Java中，双端队列（Deque，全称为”Double-Ended Queue”）是一种特殊的队列数据结构，它允许在队列的两端进行元素的插入和删除操作。Deque接口继承了Queue接口，因此具有队列的基本特性，同时还增加了双端操作的能力。</p><h1 id="Deque方法"><a href="#Deque方法" class="headerlink" title="Deque方法"></a>Deque方法</h1><p>Java中的Deque接口提供了以下主要方法：</p><ol><li><code>addFirst(E e)</code> &#x2F; <code>offerFirst(E e)</code>: 在双端队列的头部添加一个元素。</li><li><code>addLast(E e)</code> &#x2F; <code>offerLast(E e)</code>: 在双端队列的尾部添加一个元素。</li><li><code>removeFirst()</code> &#x2F; <code>pollFirst()</code>: 移除并返回双端队列的头部元素。</li><li><code>removeLast()</code> &#x2F; <code>pollLast()</code>: 移除并返回双端队列的尾部元素。</li><li><code>getFirst()</code> &#x2F; <code>peekFirst()</code>: 获取但不移除双端队列的头部元素。</li><li><code>getLast()</code> &#x2F; <code>peekLast()</code>: 获取但不移除双端队列的尾部元素。</li></ol><p>Deque接口的实现类有<code>LinkedList</code>和<code>ArrayDeque</code>，它们都实现了Deque接口，并提供了双端队列的功能。下面是一个使用ArrayDeque的示例：</p><pre class="line-numbers language-none"><code class="language-none">import java.util.*;public class DequeExample &#123;    public static void main(String[] args) &#123;        Deque&lt;Integer&gt; deque &#x3D; new ArrayDeque&lt;&gt;();        &#x2F;&#x2F; 在队列头部添加元素        deque.addFirst(1);        deque.offerFirst(2);        System.out.println(&quot;Deque: &quot; + deque); &#x2F;&#x2F; 输出: Deque: [2, 1]        &#x2F;&#x2F; 在队列尾部添加元素        deque.addLast(3);        deque.offerLast(4);        System.out.println(&quot;Deque: &quot; + deque); &#x2F;&#x2F; 输出: Deque: [2, 1, 3, 4]        &#x2F;&#x2F; 移除并返回队列头部元素        int first &#x3D; deque.removeFirst();        System.out.println(&quot;Removed first element: &quot; + first); &#x2F;&#x2F; 输出: Removed first element: 2        System.out.println(&quot;Deque: &quot; + deque); &#x2F;&#x2F; 输出: Deque: [1, 3, 4]        &#x2F;&#x2F; 移除并返回队列尾部元素        int last &#x3D; deque.removeLast();        System.out.println(&quot;Removed last element: &quot; + last); &#x2F;&#x2F; 输出: Removed last element: 4        System.out.println(&quot;Deque: &quot; + deque); &#x2F;&#x2F; 输出: Deque: [1, 3]        &#x2F;&#x2F; 获取但不移除队列头部和尾部元素        int firstElement &#x3D; deque.getFirst();        int lastElement &#x3D; deque.getLast();        System.out.println(&quot;First element: &quot; + firstElement); &#x2F;&#x2F; 输出: First element: 1        System.out.println(&quot;Last element: &quot; + lastElement); &#x2F;&#x2F; 输出: Last element: 3        System.out.println(&quot;Deque: &quot; + deque); &#x2F;&#x2F; 输出: Deque: [1, 3]    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结来说，双端队列是一种非常有用的数据结构，它可以同时在队列的头部和尾部进行元素的添加和删除操作，方便实现一些特定的需求。在Java中，我们可以使用Deque接口的实现类（如ArrayDeque）来使用双端队列的功能。</p>]]></content>
    
    
    <summary type="html">java Deque知识学习及总结</summary>
    
    
    
    <category term="Java教程" scheme="https://resmino.github.io/categories/Java%E6%95%99%E7%A8%8B/"/>
    
    <category term="Java队列" scheme="https://resmino.github.io/categories/Java%E6%95%99%E7%A8%8B/Java%E9%98%9F%E5%88%97/"/>
    
    
    <category term="Java" scheme="https://resmino.github.io/tags/Java/"/>
    
    <category term="Deque" scheme="https://resmino.github.io/tags/Deque/"/>
    
    <category term="Java双端队列" scheme="https://resmino.github.io/tags/Java%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="java Deque" scheme="https://resmino.github.io/tags/java-Deque/"/>
    
  </entry>
  
  <entry>
    <title>XML特点及语法</title>
    <link href="https://resmino.github.io/2023/085ae780ab.html"/>
    <id>https://resmino.github.io/2023/085ae780ab.html</id>
    <published>2023-08-07T00:18:16.000Z</published>
    <updated>2023-08-07T01:40:48.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h1><p><code>XML</code>：可拓展标记语言，语法有点类似<code>HTML</code>，都是通过标签对来标识数据。但与HTML不同的是，HTML的标签是给定的，而XML的标签是自定义的，但通常定义的标签是能见名知意的，并且也有一些约定俗成的的标签，比如根节点的名字一般就是<code>&lt;root&gt;&lt;/root&gt;</code></p><h2 id="XML的目的"><a href="#XML的目的" class="headerlink" title="XML的目的"></a>XML的目的</h2><p><code>XML</code>的目的就是传输和存储数据，区别于<code>HTML</code>的展示数据</p><h2 id="XML的功能"><a href="#XML的功能" class="headerlink" title="XML的功能"></a>XML的功能</h2><ul><li>用于传输数据：<code>XML</code>用于数据传输，使用标签对的原因使数据具有结构性，易读易处理</li><li>用于配置文件：例如spring的<code>xml</code>配置文件</li><li>存储数据：使用<code>xml</code>文件可以用以存储少量数据，通过解析即可获取文件中存储的数据</li></ul><h2 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h2><ol><li><p>标签</p><ul><li>标签需要自定义</li><li>标签成对出现,如下自定义标签，成对出现</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>标签不可交叉使用,如下交叉使用是错误的</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>交叉使用会报错，如下所示，23未能显示</p><img data-src="/2023/085ae780ab/image-20230807090434857.png" class><ul><li>标签大小写敏感，也就是区分大小写</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Resmino<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Age</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如下所示，99未能正常显示</p><img data-src="/2023/085ae780ab/image-20230807092224695.png" class="image-20230807090811518.png} 正确的结果如下所示： {% asset_img image-20230807091109925.png} - 标签也具有像HTML的属性，但实际应用中很少使用，毕竟都已经自定义标签了，就不必再给自定义标签定义属性了。 2. 根节点 - 必须有根节点，根节点一般为&#96;&lt;root&gt;&lt;&#x2F;root&gt;&#96;,当然也可以自定义，但从众原因吧，根节点还是建议写root 3. 头声明 - &#96;xml&#96;头声明格式：&#96;&lt;?xml version&#x3D;“1.0” encoding&#x3D;“utf-8&quot; ?&gt;&#96; - 在XML文件中，头声明语法上可有可无，但一般建议加上，因为头声明中比较重要的是编码格式&#96;encoding&#96; 4. 注释：xml注释与HTML一样使用&#96;&lt;!--这是注释--&gt;&#96;表示注释 <pre class=" line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 这是XML文档的注释--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Resmino<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code> 5. &#96;CDATA&#96;的使用 在XML文件中同样有一些特殊字符，比如在数学公式中使用小于号&#96;&lt;&#96;和大于号&#96;&gt;&#96;,就需要先转换实体字符才能正常表示，但如果大量使用这一类的字符一个一个转效率低下，且容易出错，所以可以使用&#96;CDATA&#96;，让这些字符不被解析，直接原样传输。使用方法如下： <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token cdata">&lt;![CDATA[ 2+3 > 4  且 4-3 &lt; 2]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> 结果如下所示： {% asset_img"></li><li><p>代码示例</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 注释 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>xiao zhang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 公式: 1+1>1 --></span>    <span class="token cdata">&lt;![CDATA[判断：1+1 > 1 ,是否正确]]></span>&lt;/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">简要介绍XML特点及其语法</summary>
    
    
    
    <category term="XML" scheme="https://resmino.github.io/categories/XML/"/>
    
    
    <category term="XML" scheme="https://resmino.github.io/tags/XML/"/>
    
    <category term="XML学习" scheme="https://resmino.github.io/tags/XML%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的几种遍历方式</title>
    <link href="https://resmino.github.io/2023/08ed7e80a0.html"/>
    <id>https://resmino.github.io/2023/08ed7e80a0.html</id>
    <published>2023-08-05T09:01:21.000Z</published>
    <updated>2023-08-07T02:10:18.945Z</updated>
    
    <content type="html"><![CDATA[<p>深度优先遍历（Depth-First Traversal）和广度优先遍历（Breadth-First Traversal）都是树或图的常用遍历方式，它们用于按不同的顺序访问树或图中的节点。</p><h1 id="深度优先遍历（DFS）"><a href="#深度优先遍历（DFS）" class="headerlink" title="深度优先遍历（DFS）"></a>深度优先遍历（DFS）</h1><p>深度优先遍历是一种沿着树或图的深度方向遍历的方式，它从根节点开始，沿着一条路径尽可能深地遍历直到达到叶子节点，然后回溯到上一级节点，再继续深入其他分支。深度优先遍历使用递归或栈数据结构来实现。</p><p>二叉树每个节点最多有两个子节点：左子节点和右子节点。在二叉树的深度优先遍历中，有三种常见的方式：前序遍历、中序遍历和后序遍历。这些遍历方式都是通过不同的顺序访问二叉树中的节点，以达到不同的目的。以以下二叉树作为示例。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">    1   / \  2   3 / \ / \4  5 6  7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><ul><li>访问顺序：根-左-右</li></ul><p>前序遍历顺序是先访问根节点，然后递归地访问左子树，最后递归地访问右子树。在上面的例子中，前序遍历的结果是：1, 2, 4, 5, 3, 6, 7。</p><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><ul><li>访问顺序：左-根-右</li></ul><p>中序遍历顺序是先递归地访问左子树，然后访问根节点，最后递归地访问右子树。在上面的例子中，中序遍历的结果是：4, 2, 5, 1, 6, 3, 7。</p><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><ul><li>访问顺序：左-右-根</li></ul><p>后序遍历顺序是先递归地访问左子树，然后递归地访问右子树，最后访问根节点。在上面的例子中，后序遍历的结果是：4, 5, 2, 6, 7, 3, 1。</p><h1 id="广度优先遍历（BFS）"><a href="#广度优先遍历（BFS）" class="headerlink" title="广度优先遍历（BFS）"></a>广度优先遍历（BFS）</h1><p>广度优先遍历是一种按层级顺序遍历树或图的方式，它<strong>从根节点开始，先访问根节点，然后逐层向下访问同一层级的节点，直到遍历到最后一层。广度优先遍历使用队列数据结构来实现。</strong></p><p>在二叉树的广度优先遍历中，<strong>从上往下，从左往右</strong>依次遍历每一层的节点。在上面的例子中，广度优先遍历的结果是：1, 2, 3, 4, 5, 6, 7。</p><p>深度优先遍历和广度优先遍历在解决不同类型的问题时有不同的应用场景。<strong>深度优先遍历适用于需要一直沿着一条路径深入直到达到目标节点的情况，例如查找路径、生成树等。</strong> <strong>广度优先遍历适用于需要逐层遍历所有节点的情况，例如查找最短路径、层级遍历</strong>  。在实际问题中，根据具体的需求和数据结构，选择合适的遍历方式可以更有效地解决问题。</p>]]></content>
    
    
    <summary type="html">数据结构-二叉树的几种遍历方式</summary>
    
    
    
    <category term="数据结构" scheme="https://resmino.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://resmino.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="https://resmino.github.io/2023/082da0528d.html"/>
    <id>https://resmino.github.io/2023/082da0528d.html</id>
    <published>2023-08-05T07:29:35.000Z</published>
    <updated>2023-08-06T05:30:44.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP算法简介"><a href="#KMP算法简介" class="headerlink" title="KMP算法简介"></a>KMP算法简介</h1><ul><li><p><code>KMP</code>（Knuth-Morris-Pratt）算法是一种用于在一个文本串<code>S</code>中查找一个模式串P出现位置的字符串匹配算法。它的时间复杂度为<code>O(N+M)</code>，其中N是文本串的长度，M是模式串的长度。相比传统的字符串匹配算法（如朴素的暴力匹配算法），KMP算法具有更高的效率。</p></li><li><p>KMP算法的核心思想是<strong>利用已经匹配过的信息，避免不必要的回溯，从而减少匹配的次数</strong>。具体来说，它在匹配过程中维护一个<strong>部分匹配表（Partial Match Table）</strong>，用于指导下一步的匹配位置。<strong>部分匹配表记录了模式串中前缀和后缀的最长相等长度</strong>，这样可以根据部分匹配表的信息在匹配过程中跳过一些不可能匹配的位置，从而加快匹配的速度。</p></li><li><p>直白的说，kmp就是在一个字符串中查找字串所在的位置，只不过它通过查找字串的前后缀来移动，减少匹配次数</p></li></ul><h1 id="KMP算法步骤"><a href="#KMP算法步骤" class="headerlink" title="KMP算法步骤"></a>KMP算法步骤</h1><p>以下是KMP算法的实现步骤：</p><ol><li>构建部分匹配表（Partial Match Table）：对于模式串P，计算以每个位置结尾的子串的最长相等前缀后缀的长度。</li><li>进行匹配：在文本串S中从左到右遍历，同时在模式串P中根据部分匹配表进行跳跃匹配。</li></ol><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>下面给出KMP算法的Java代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KMPAlgorithm</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 构建部分匹配表</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildPartialMatchTable</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> table<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> table<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// KMP算法匹配</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kmpMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token function">buildPartialMatchTable</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> table<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 匹配成功，返回模式串在文本串中的起始位置</span>                <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 匹配失败，返回-1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"ABABABABCABABABABCABABABABC"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token string">"ABABC"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token function">kmpMatch</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pattern found at index: "</span> <span class="token operator">+</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pattern not found in the text."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们用<code>kmpMatch</code>方法进行文本串和模式串的匹配，并返回模式串在文本串中的起始位置。如果找不到匹配，则返回-1。</p><p>注意：KMP算法的关键是构建部分匹配表，它影响了匹配的效率。在实际应用中，如果需要多次对相同的模式串进行匹配，最好预先计算并保存部分匹配表，然后进行多次匹配。这样可以避免重复计算，提高效率。</p>]]></content>
    
    
    <summary type="html">算法学习-</summary>
    
    
    
    <category term="算法学习" scheme="https://resmino.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://resmino.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法学习" scheme="https://resmino.github.io/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java选择结构小练习</title>
    <link href="https://resmino.github.io/2023/088f908750.html"/>
    <id>https://resmino.github.io/2023/088f908750.html</id>
    <published>2023-08-05T06:13:52.000Z</published>
    <updated>2023-08-05T06:51:26.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>用户输入消费金额，然后选择换购产品，根据输入计算消费总额，并输出结果，综合使用<code>if</code>和<code>switch</code>实现，具体要求如下所示：</p><img data-src="/2023/088f908750/image-20230805142407431.png" class><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入消费金额："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> money <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否参加优惠换购活动："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1:满50元，加2元换购百事可乐饮料1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2:满100元，加3元换购500ml可乐1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3:满100元，加10元换购5公斤面粉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4:满200元，加10元换购1个苏泊尔炒菜锅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5:满200元，加20元换购欧莱雅爽肤水1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0:不换购"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请选择:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：百事可乐饮料1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：500ml可乐1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：5公斤面粉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：1个苏泊尔炒菜锅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本次消费总金额："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n成功换购：欧莱雅爽肤水1瓶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费金额不满足换购条件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入成绩，根据成绩区间显示奖励，奖励区间如下所示：</p><ul><li>&lt;60: 无奖励</li><li>‘&gt;&#x3D;’60 &amp;&amp; &lt;90:奖励习题册</li><li>‘&gt;&#x3D;’90 &amp;&amp; &lt;100 : 奖励MP4</li><li>100：奖励一辆车（玩具哦）</li></ul><p>如下图所示：</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><code>if</code>实现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入小赵的考试成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//if结构</span><span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爸爸奖励一辆车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一个MP4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一本参考书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励擦肩而过，继续加油吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>switch</code>实现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//switch结构</span><span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励擦肩而过，继续加油吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一本参考书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一个MP4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爸爸奖励一辆车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入三个数，使用if进行排序后输出</p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第一个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第二个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第三个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">></span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>            c <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三个数从小到大为："</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入三个数，判断是否能构成三角形，若能，进而判断是否是等边、直角、等腰还是普通三角形，并输出结果</p><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第一个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第二个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第三个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b <span class="token operator">&lt;</span> c <span class="token operator">||</span> a<span class="token operator">+</span>c <span class="token operator">&lt;</span>b <span class="token operator">||</span> b<span class="token operator">+</span>c <span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不能组成三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b <span class="token operator">&amp;&amp;</span>  b<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是等边三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a <span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">==</span>c<span class="token operator">*</span>c <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a <span class="token operator">+</span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token operator">==</span>b<span class="token operator">*</span>b <span class="token operator">||</span> <span class="token punctuation">(</span>c<span class="token operator">*</span>c <span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">==</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是直角三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> a<span class="token operator">==</span>b <span class="token operator">||</span> b<span class="token operator">==</span>c <span class="token operator">||</span> a<span class="token operator">==</span>c  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是等腰三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是普通三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入月份，判断季节</p><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">no05</span><span class="token punctuation">(</span><span class="token class-name">Scanner</span> sc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入月份："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">学习笔记-对于java中选择结构，if,if-else,if-else-if,以及switch的小练习</summary>
    
    
    
    <category term="学习笔记" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java练习" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="java" scheme="https://resmino.github.io/tags/java/"/>
    
    <category term="java教程" scheme="https://resmino.github.io/tags/java%E6%95%99%E7%A8%8B/"/>
    
    <category term="java知识总结" scheme="https://resmino.github.io/tags/java%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java选择结构</title>
    <link href="https://resmino.github.io/2023/084a23ab17.html"/>
    <id>https://resmino.github.io/2023/084a23ab17.html</id>
    <published>2023-08-05T06:13:24.000Z</published>
    <updated>2023-08-05T06:51:26.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ul><li>对于if结构内需要多条语句时，注意添加{}</li><li>单条语句也建议加上{}</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>express<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太棒了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>express<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太棒了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太差了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if-else if-else"></a>if-else if-else</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>express1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太棒了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>express2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还行吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太差了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小练习（判断闰年、平年）"><a href="#小练习（判断闰年、平年）" class="headerlink" title="小练习（判断闰年、平年）"></a>小练习（判断闰年、平年）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"please input a year:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token string">" 是闰年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token string">"  是平年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a>嵌套if</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入百米成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜，进入决赛！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入性别:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sex <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您已进入男子组决赛！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您已进入女子组决赛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的信息有误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抱歉，您无缘决赛，下次见哦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入今天是周几："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> week <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>week<span class="token operator">>=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> week <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> week <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期"</span><span class="token operator">+</span>week<span class="token operator">+</span><span class="token string">",可以出去happy一下啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入今天气温："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> temp <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">>=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今日气温 ："</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">" ,今天天气适合游泳哦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今日气温 ："</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">", 今天天气适合爬山哦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天星期 "</span><span class="token operator">+</span>week<span class="token operator">+</span><span class="token string">", 是工作日哦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入今天天气（好？差："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> tianQi <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tianQi<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这么好的天气，去谈业务吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天气不好，就如你今天的心情，老实上班吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个星期只有七天呐~ 小迷糊~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>对于多分支if-else语句，需要注意条件的顺序，顺序不合理，会出现错误结果</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ul><li>处理等值条件判断的情况</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//switch结构</span>       <span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励擦肩而过，继续加油吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一本参考书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妈妈奖励一个MP4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爸爸奖励一辆车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">default</span><span class="token operator">:</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举类Enum"><a href="#枚举类Enum" class="headerlink" title="枚举类Enum"></a>枚举类Enum</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>    <span class="token constant">MONDAY</span><span class="token punctuation">,</span><span class="token constant">SUNDAY</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">学习笔记-Java选择结构小结，用于个人回忆记录版，知识点不详细</summary>
    
    
    
    <category term="学习笔记" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
    <category term="java" scheme="https://resmino.github.io/tags/java/"/>
    
    <category term="java教程" scheme="https://resmino.github.io/tags/java%E6%95%99%E7%A8%8B/"/>
    
    <category term="java知识总结" scheme="https://resmino.github.io/tags/java%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>IDEA配置注释模板</title>
    <link href="https://resmino.github.io/2023/089a2f66ac.html"/>
    <id>https://resmino.github.io/2023/089a2f66ac.html</id>
    <published>2023-08-05T01:45:01.000Z</published>
    <updated>2023-08-05T02:29:03.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置类注释模板"><a href="#配置类注释模板" class="headerlink" title="配置类注释模板"></a>配置类注释模板</h1><ol><li>打开IDEA，选择File-&gt;Setting,如下图所示：</li></ol><img data-src="/2023/089a2f66ac/image-20230805095019915.png" class><ol start="2"><li>在Editor-&gt;File and Code Templates-&gt;includes,或者直接在搜索框搜索File，如下图所示。</li></ol><img data-src="/2023/089a2f66ac/image-20230805095349237.png" class><ol start="3"><li>然后将下面内容粘贴到右侧框里</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/***@BelongsProject: $&#123;PROJECT_NAME&#125;*@BelongsPackage: $&#123;PACKAGE_NAME&#125;*@Author: $&#123;USER&#125;*@CreateTime: $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;  $&#123;HOUR&#125;:$&#123;MINUTE&#125;*@Description: TODO*@Version: 1.0*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示：</p><img data-src="/2023/089a2f66ac/image-20230805095849891.png" class><ol start="4"><li>配置好的效果图如下所示：</li></ol><img data-src="/2023/089a2f66ac/image-20230805100226352.png" class><h1 id="配置方法注释模板"><a href="#配置方法注释模板" class="headerlink" title="配置方法注释模板"></a>配置方法注释模板</h1><ol><li>同样是在Setting中，选择Live Templates，点击右侧+号，选择Template group,如下图所示：</li></ol><img data-src="/2023/089a2f66ac/image-20230805100447973.png" class><ol start="2"><li>输入Group名字（自己起），如下所示：</li></ol><img data-src="/2023/089a2f66ac/image-20230805101002134.png" class><ol start="3"><li>然后找到自己新建的group,选中，然后点击+号，选择Live Template，根据如下所示图片进行操作。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">*</span> <span class="token annotation punctuation">@description</span><span class="token operator">:</span> $description$$params$$<span class="token keyword">return</span>$  <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> $<span class="token constant">USER</span>$ <span class="token operator">*</span> <span class="token annotation punctuation">@date</span> $date$ $time$ <span class="token operator">*</span><span class="token operator">/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面内容粘贴在下图所示位置。</p><img data-src="/2023/089a2f66ac/image-20230805101756237.png" class><ol start="4"><li>上述步骤完成后，点击Edit Variables按钮，显示具体参数如下所示：</li></ol><img data-src="/2023/089a2f66ac/image-20230805102122256.png" class><p>上面参数的表达式照我上面的配置即可</p><ul><li>params的表达式如下</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">"def result=''; def params=\"$&#123;_1&#125;\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=' * @param ' + params[i] + ((i &lt; params.size() - 1) ? '\\n' : '')&#125;; return result"</span><span class="token punctuation">,</span> <span class="token function">methodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>return的表达式如下</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">"return \"$&#123;_1&#125;\" == 'void' ? null : '\\r\\n * @return: ' + \"$&#123;_1&#125;\""</span><span class="token punctuation">,</span> <span class="token function">methodReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意这里的return返回的类型会有包名</strong>，如下所示：</p><img data-src="/2023/089a2f66ac/image-20230805102543264.png" class><p>如果不想要包名，直接输入：<code>methodReturnType()</code>即可。</p>]]></content>
    
    
    <summary type="html">给IDEA配置类和方法的注释模板，让你的代码看起来*格更高</summary>
    
    
    
    <category term="软件合集" scheme="https://resmino.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%90%88%E9%9B%86/"/>
    
    <category term="IDEA" scheme="https://resmino.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%90%88%E9%9B%86/IDEA/"/>
    
    
    <category term="IDEA" scheme="https://resmino.github.io/tags/IDEA/"/>
    
    <category term="idea" scheme="https://resmino.github.io/tags/idea/"/>
    
    <category term="IDEA配置注释" scheme="https://resmino.github.io/tags/IDEA%E9%85%8D%E7%BD%AE%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>88.合并两个有序数组</title>
    <link href="https://resmino.github.io/2023/0815739779.html"/>
    <id>https://resmino.github.io/2023/0815739779.html</id>
    <published>2023-08-04T08:03:49.000Z</published>
    <updated>2023-08-04T08:16:52.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h1><p><strong>点击跳转</strong>: <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tZXJnZS1zb3J0ZWQtYXJyYXkvZGVzY3JpcHRpb24v">LeetCode-No88. 合并两个有序数组<i class="fa fa-external-link-alt"></i></span></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>当看到这一题的时候，想到了两种解法，有一种是一定可以实现的，另一种可能实现较为麻烦。</p></blockquote><ul><li><p>1、先合并数组，然后直接排序。合并简单，直接一个for循环即可，而排序的话这里有两种方法</p><ul><li><p>使用Arrays.sort()方法直接排序</p></li><li><p>使用冒泡排序</p></li></ul></li><li><p>2、因为是两个有序非递减数组，所以考虑倒序，边比较边排序</p></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="先合并再排序"><a href="#先合并再排序" class="headerlink" title="先合并再排序"></a>先合并再排序</h2><h3 id="代码1（使用sort）"><a href="#代码1（使用sort）" class="headerlink" title="代码1（使用sort）"></a>代码1（使用sort）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums1<span class="token punctuation">[</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果1"><a href="#结果1" class="headerlink" title="结果1"></a>结果1</h3><img data-src="/2023/0815739779/image-20230804161324898.png" class><h3 id="代码2（冒泡）"><a href="#代码2（冒泡）" class="headerlink" title="代码2（冒泡）"></a>代码2（冒泡）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums1<span class="token punctuation">[</span>i<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果2"><a href="#结果2" class="headerlink" title="结果2"></a>结果2</h3><img data-src="/2023/0815739779/image-20230804161616211.png" class><h2 id="倒序排序"><a href="#倒序排序" class="headerlink" title="倒序排序"></a>倒序排序</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Solution &#123;     public void merge(int [] nums1,int m, int [] nums2,int n)&#123;        int index &#x3D; m+n-1;        while(n&gt;0 &amp;&amp; m&gt;0)&#123;            if(nums1[m-1]&gt;&#x3D;nums2[n-1])&#123;                nums1[index--]&#x3D;nums1[m-1];                m--;            &#125;else&#123;                nums1[index--]&#x3D;nums2[n-1];                n--;            &#125;        &#125;        if(m&#x3D;&#x3D;0)&#123;           while(n-1&gt;&#x3D;0)&#123;               nums1[index--]&#x3D;nums2[--n];           &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><img data-src="/2023/0815739779/image-20230804161422446.png" class>]]></content>
    
    
    <summary type="html">LeetCode-88.合并两个有序数组题解</summary>
    
    
    
    <category term="LeetCode题解" scheme="https://resmino.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Java" scheme="https://resmino.github.io/tags/Java/"/>
    
    <category term="leetcode" scheme="https://resmino.github.io/tags/leetcode/"/>
    
    <category term="LeetCode" scheme="https://resmino.github.io/tags/LeetCode/"/>
    
    <category term="leetcode题解" scheme="https://resmino.github.io/tags/leetcode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>小练习01</title>
    <link href="https://resmino.github.io/2023/08f6390c92.html"/>
    <id>https://resmino.github.io/2023/08f6390c92.html</id>
    <published>2023-08-04T05:34:58.000Z</published>
    <updated>2023-08-04T07:18:21.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>1：编程实现，通过键盘输入6位卡号，求6位数字之和。</p><p>2：编程实现，通过键盘输入天数，求一共有几周零几天。</p><p>3：编程实现：通过键盘输入半径，求圆的周长与面积。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">day0804<span class="token punctuation">.</span>homework</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author zzjie * @version 1.0 * @date 2023/8/4 11:56 * @description: 0804作业 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Homework</span> homework <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Homework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入6为卡号: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡号 "</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">" 的各位数字之和为: "</span><span class="token operator">+</span>homework<span class="token punctuation">.</span><span class="token function">toSum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入天数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>homework<span class="token punctuation">.</span><span class="token function">toDay</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入圆的半径: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> c<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>homework<span class="token punctuation">.</span><span class="token function">toArea</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/**     * @description: 1、编程实现，通过键盘输入6位卡号，求6位数字之和。    * @param: num     * @return: int    * @author zzjie    * @date: 2023/8/4 11:59    */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">toSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum<span class="token operator">+=</span>num<span class="token operator">/</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**      * @description: 2：编程实现，通过键盘输入天数，求一共有几周零几天。     * @param: num      * @return: java.lang.String      * @author zzjie     * @date: 2023/8/4 12:08     */</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> week<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>day<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        week <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">;</span>        day <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token operator">+</span><span class="token string">" 天，共有 "</span><span class="token operator">+</span>week<span class="token operator">+</span><span class="token string">" 周零 "</span><span class="token operator">+</span>day<span class="token operator">+</span><span class="token string">" 天"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**      * @description:  3：编程实现：通过键盘输入半径，求圆的周长与面积。     * @param: r     * @return: java.lang.String      * @author zzjie     * @date: 2023/8/4 12:15     */</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        s<span class="token operator">=</span><span class="token constant">PI</span><span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span>   <span class="token comment">// or s=PI*Math.pow(r,2);</span>        c<span class="token operator">=</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"半径为 "</span><span class="token operator">+</span>r<span class="token operator">+</span><span class="token string">" 的圆，圆的周长为: "</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">" ，面积为: "</span><span class="token operator">+</span>s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1>]]></content>
    
    
    <summary type="html">学习笔记-运算符小练习</summary>
    
    
    
    <category term="学习笔记" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java练习" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="java" scheme="https://resmino.github.io/tags/java/"/>
    
    <category term="java教程" scheme="https://resmino.github.io/tags/java%E6%95%99%E7%A8%8B/"/>
    
    <category term="java知识总结" scheme="https://resmino.github.io/tags/java%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java运算符</title>
    <link href="https://resmino.github.io/2023/08778179f.html"/>
    <id>https://resmino.github.io/2023/08778179f.html</id>
    <published>2023-08-04T05:34:21.000Z</published>
    <updated>2023-08-04T07:27:48.052Z</updated>
    
    <content type="html"><![CDATA[<p>#运算符</p><p><strong>使用过程中，注意数据类型（会不会产生数据类型转换）</strong></p><ul><li>‘+’</li><li>‘-’</li><li>‘*’</li><li>‘&#x2F;’</li><li>‘%’: 模运算，求余数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo03 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input a four number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"四位数："</span><span class="token operator">+</span><span class="token string">"千位："</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"百位："</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"十位"</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">"个位"</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span>d <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经检测，您为优质用户，恭喜您中奖了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好运擦肩而过~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>&#x3D;</p></li><li><p>&#x3D;&#x3D;</p><ul><li>对于基本数据类型，可以使用&#x3D;&#x3D;进行比较</li><li>对于引用类型则不可以，eg：对于String，需要使用equals()方法。</li><li>对于数组和引用类型，创建时会有两块地址，一是存放实际数据，另一个是实际数据存放的地址，而使用&#x3D;&#x3D;比较的是地址，equals比较的是数据内容。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo04 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1==str2结果："</span><span class="token operator">+</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1==str2结果："</span><span class="token operator">+</span>str1<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1==str2结果："</span><span class="token operator">+</span>str2<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1==str2结果："</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img data-src="/2023/08778179f/image-20230804101218630.png" class></li><li><p>&amp;&amp;：全为true，从前到后，有一个条件成立就不再继续判断</p></li><li><p>||：有一个成立就不再判断</p></li><li><p>&amp;：不管是否全为true，都会全部判断</p></li><li><p>|：都会全部判断</p></li><li><p>^：异或，相同为0，不同为1</p></li><li><p>~：按位取反</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span> <span class="token punctuation">,</span>b<span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> c<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">&amp;&amp;</span> b<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">&amp;</span> b<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">||</span> c<span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">|</span> c<span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b <span class="token operator">|</span> c<span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">^</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">^</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">^</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>‘&gt;&gt;’:有符号右移，高位补符号位，低位丢弃</p></li><li><p>‘&lt;&lt;’:左移操作，将数据转换成二进制后，向左移若干位，高位丢弃，低位补零</p></li><li><p>‘&gt;&gt;&gt;’：无符号右移高位补零，低位丢弃</p></li><li><p>express1    ？express2 : express3 条件表达式，当express1成立时，使用express2，反之使用express3</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">></span><span class="token number">2</span> <span class="token operator">?</span> yes <span class="token operator">:</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// no</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">?</span> yes <span class="token operator">:</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="自增运算"><a href="#自增运算" class="headerlink" title="自增运算"></a>自增运算</h1><ul><li>自增：++<ul><li>a++: 先使用a的值，然后再做自增运算</li><li>++a:先自增，然后再使用a的值</li></ul></li><li>自减：–<ul><li>a–:先使用a的值，然后再做自减运算</li><li>–a:先自减，然后再使用a的值</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">int</span> a<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">--</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#运算符优先级</p><img data-src="/2023/08778179f/image-20230804132459473.png" class><p>**<br> * @description: TODO<br> * @author $user$<br> * @date $date$ $time$<br> * @version 1.0<br> *&#x2F;</p><p>&#x2F;**</p><ul><li>@author ${USER}</li><li>@date ${DATE} ${TIME}</li><li>@version 1.0</li><li>@description: TODO<br> *&#x2F;</li></ul>]]></content>
    
    
    <summary type="html">学习笔记-Java运算符，包括运算符的简单使用以及运算符的优先级</summary>
    
    
    
    <category term="学习笔记" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
    <category term="java" scheme="https://resmino.github.io/tags/java/"/>
    
    <category term="java教程" scheme="https://resmino.github.io/tags/java%E6%95%99%E7%A8%8B/"/>
    
    <category term="java知识总结" scheme="https://resmino.github.io/tags/java%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java标识符和基本数据类型</title>
    <link href="https://resmino.github.io/2023/084addbb94.html"/>
    <id>https://resmino.github.io/2023/084addbb94.html</id>
    <published>2023-08-04T05:34:01.000Z</published>
    <updated>2023-08-04T07:27:09.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li><p>组成：字母、数字、下划线</p></li><li><p>关键字：48个</p></li><li><p>驼峰命名：若变量由多个单词组成，第一个单词首字母小写，其他单词首字母大写</p></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>分为基本数据类型和应用数据类型。</p><ul><li><p>八大基本数据类型：</p><ul><li>byte：1字节</li><li>char：2</li><li>short：2</li><li>int：4</li><li>long：8</li><li>float：4</li><li>double：8</li><li>boolean：1,    true,false</li></ul></li><li><p>数据存储</p><ul><li>永久存储：MySQL、sqlserver，oracle，nosql等</li><li>瞬时存储：中间数据，程序结束后空间回收</li></ul></li><li><p>常量：</p><ul><li>使用final定义</li><li>命名规则：字母全大写</li></ul></li><li><p>变量：</p><ul><li>定义：根据数据类型进行定义</li><li>命名：驼峰规范</li><li>使用步骤<ul><li>声明变量：声明相应数据类型的变量，int a;   (一般声明和初始化同时进行，int a &#x3D; 0;)</li><li>初始化：使用&#x3D;赋值，为变量名指向的地址空间存入数据 a&#x3D;0;</li><li>使用：在代码中通过变量名操作数据  System.out.println(a);   —0</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> score <span class="token operator">=</span> <span class="token number">98.5f</span><span class="token punctuation">;</span><span class="token class-name">String</span> course <span class="token operator">=</span> <span class="token string">"Java课"</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token keyword">char</span> sex <span class="token operator">=</span> <span class="token char">'男'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>course<span class="token operator">+</span><span class="token string">"最高成绩是："</span><span class="token operator">+</span>score<span class="token operator">+</span><span class="token string">"\n最高分学员姓名："</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"\n最高分学员性别："</span><span class="token operator">+</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类型转换</p><ul><li>强制类型转换：使用（）进行强制类型转换，会产生精度损失</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>*out<span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//   c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>自动类型转换：自下向上转换</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>*out<span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//97</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>BigDecimal:用以计算过程中精度要求高，不能随意截断的数据，eg：money</li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习笔记-Java标识符和基本数据类型</summary>
    
    
    
    <category term="学习笔记" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
    <category term="java" scheme="https://resmino.github.io/tags/java/"/>
    
    <category term="java教程" scheme="https://resmino.github.io/tags/java%E6%95%99%E7%A8%8B/"/>
    
    <category term="java知识总结" scheme="https://resmino.github.io/tags/java%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="https://resmino.github.io/2023/08f7ede91d.html"/>
    <id>https://resmino.github.io/2023/08f7ede91d.html</id>
    <published>2023-08-04T02:42:54.000Z</published>
    <updated>2023-08-04T07:26:45.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、java环境安装"><a href="#1、java环境安装" class="headerlink" title="1、java环境安装"></a>1、java环境安装</h2><ul><li>jdk8安装：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkxNTY0Ny9hcnRpY2xlL2RldGFpbHMvMTMxMDM4NzkzP3NwbT0xMDAxLjIwMTQuMzAwMS41NTAx">点击跳转查看安装教程<i class="fa fa-external-link-alt"></i></span></li><li>安装eclipse：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MzQ0NTg2L2FydGljbGUvZGV0YWlscy8xMjM5NDI2ODU=">点击跳转<i class="fa fa-external-link-alt"></i></span></li><li>idea：教程网上搜吧，一堆</li></ul><h2 id="2、记事本"><a href="#2、记事本" class="headerlink" title="2、记事本"></a>2、记事本</h2><p>记事本运行java文件</p><ul><li>使用记事本新建文件，编写java程序</li><li>将后缀名改为.java</li><li>在命令提示符进入java文件所在位置</li><li>然后使用命令javac chengxu.java编译</li><li>使用命令java chengxu 运行</li></ul><h2 id="3、idea"><a href="#3、idea" class="headerlink" title="3、idea"></a>3、idea</h2><p>编写简单输出语句，熟悉ide用法，idea是真的好用哦</p>]]></content>
    
    
    <summary type="html">学习笔记-java基础，jdk安装及环境配置，以及ide的选择（eclipse和idea）</summary>
    
    
    
    <category term="学习笔记" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://resmino.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
    <category term="java" scheme="https://resmino.github.io/tags/java/"/>
    
    <category term="java教程" scheme="https://resmino.github.io/tags/java%E6%95%99%E7%A8%8B/"/>
    
    <category term="java知识总结" scheme="https://resmino.github.io/tags/java%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Windows快捷打开管理员模式命令行方式</title>
    <link href="https://resmino.github.io/2023/08e0ceff35.html"/>
    <id>https://resmino.github.io/2023/08e0ceff35.html</id>
    <published>2023-08-02T11:40:43.000Z</published>
    <updated>2023-08-09T00:40:12.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="鼠标点击启动"><a href="#鼠标点击启动" class="headerlink" title="鼠标点击启动"></a>鼠标点击启动</h1><ul><li>windows搜索框搜索cmd或者命令行,如下所示：</li></ul><img data-src="/2023/08e0ceff35/image-20230802195303970.png" class><h1 id="Win-R启动"><a href="#Win-R启动" class="headerlink" title="Win+R启动"></a>Win+R启动</h1><ul><li>使用Win+R快捷键，然后输入cmd后，再次使用Ctrl+Shift+Enter快捷键打开管理员模式命令行</li></ul><h1 id="为打开管理员模式命令行设置快捷键"><a href="#为打开管理员模式命令行设置快捷键" class="headerlink" title="为打开管理员模式命令行设置快捷键"></a>为打开管理员模式命令行设置快捷键</h1><ol><li>windows搜索框搜索cmd，然后点击打开文件位置，如下图所示</li></ol><img data-src="/2023/08e0ceff35/image-20230802195748221.png" class><ol start="2"><li>进入文件后，把下面的命令提示符快捷方式复制一份放在桌面，如下所示：</li></ol><img data-src="/2023/08e0ceff35/image-20230802202441605.png" class><ol start="3"><li>复制后，先重命名一下，我这里命名的是命令提示符管理员，以便于移回原先的文件夹(放在桌面不美观，当然你也可以选择自己想要放的位置，并不影响)，重命名后剪切移动到原来的位置，如下所示：</li></ol><img data-src="/2023/08e0ceff35/image-20230802203013311.png" class><ol start="4"><li>右键重命名后得到的快捷方式，选择属性，然后选择自己记得住且不会冲突的快捷键，我选择的是Ctrl+K如下所示：</li></ol><img data-src="/2023/08e0ceff35/image-20230802203458849.png" class><img data-src="/2023/08e0ceff35/image-20230802203707536.png" class><ol start="5"><li>然后点击高级，勾选用管理员身份运行，之后点击确定和应用即可。</li></ol><ol start="6"><li><p>然后使用快捷键即可快捷使用管理员模式命令提示符</p><img data-src="/2023/08e0ceff35/image-20230802204059861.png" class></li></ol>]]></content>
    
    
    <summary type="html">Windows 快捷打开管理员模式命令行方式</summary>
    
    
    
    <category term="OS" scheme="https://resmino.github.io/categories/OS/"/>
    
    <category term="Windows" scheme="https://resmino.github.io/categories/OS/Windows/"/>
    
    <category term="Windows命令" scheme="https://resmino.github.io/categories/OS/Windows/Windows%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="cmd" scheme="https://resmino.github.io/tags/cmd/"/>
    
    <category term="管理员模式cmd" scheme="https://resmino.github.io/tags/%E7%AE%A1%E7%90%86%E5%91%98%E6%A8%A1%E5%BC%8Fcmd/"/>
    
    <category term="管理员命令行" scheme="https://resmino.github.io/tags/%E7%AE%A1%E7%90%86%E5%91%98%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础</title>
    <link href="https://resmino.github.io/2023/088c85f492.html"/>
    <id>https://resmino.github.io/2023/088c85f492.html</id>
    <published>2023-08-02T08:54:14.000Z</published>
    <updated>2023-08-11T02:52:50.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><p>html是解释型语言</p><h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><p>html的标签不具有大小写敏感性，和XML语言不同。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul><li><code>&lt;h1&gt;&lt;/h1&gt;</code>为一级标题，同样的一共具有六级标题，数字为1-6</li></ul><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><ul><li><code>&lt;p&gt;&lt;/p&gt;</code>，表示段落，段落内的格式相同</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><code>&lt;a href=&quot; &quot;&gt;&lt;/a&gt;</code>：标签表示一个链接， 具有属性href为链接地址</li><li>链接的<code>target</code>属性:target属性定义链接文档在和什么位置显示</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://zamz.top<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener noreferrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>访问resmino's blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_blank</code>会在新页面打开链接文档</p><ul><li>链接的id属性：id属性用于指定一个元素，id具有唯一性，一个html文档中不可能有多个元素具有相同id</li><li>id和class选择器的比较：<ul><li>id的优先级比class的高，当id和class标识同一个元素的时候，id的样式会覆盖class设置的样式。</li><li>js也可以通过id操作具有特定id的元素</li><li>id名称对大小写敏感</li><li>id必须包含至少一个字符，且不能包含空白字符（空格，制表符等）</li><li>class可以由多个元素使用</li></ul></li></ul><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><ul><li><code>&lt;img src=&quot;&quot;&gt;</code></li><li>src的路径：<ul><li>相对路径</li><li>绝对路径</li></ul></li></ul><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ul><li><code>&lt;br&gt;</code></li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>有序列表：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有序列表有一个type属性，设置的是有序列表的序号，默认的是1，2，3；还有一个start属性，表示序号起始。</p><p>type的常用取值如下：</p><ol><li>A</li><li>a</li><li>I</li><li>i</li><li>1</li></ol><p><img data-src="/HTML%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE/image-20230810162320627.png" alt="image-20230810162320627"></p><p><img data-src="/HTML%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE/image-20230810162635091.png" alt="image-20230810162635091"></p><ul><li>无序列表</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第一列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li><code>&lt;b&gt;&lt;/b&gt;</code>:加粗</li><li><code>&lt;i&gt;&lt;/i&gt;</code>：斜体</li><li><code>&lt;u&gt;&lt;/u&gt;</code>：下划线</li></ul><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><ul><li>下标：<code>&lt;sub&gt;&lt;/sub&gt;</code></li><li>上标：<code>&lt;sup&gt;&lt;/sup&gt;</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    H<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>O    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><ul><li><code>&lt;head&gt;&lt;/head&gt;</code>:包含了所有的头部标签元素，可以插入脚本，样式文件,头部可以使用的标签如下<ul><li><code>&lt;title&gt;</code>:定义了文档的标题，在html中是必须的。比如你收藏一个网页时，在你收藏夹里显示的就是这个标题</li><li><code>&lt;style&gt;</code>:定义html文档的样式文件引用地址，也可以定义html文档内部的样式</li><li><code>&lt;meta&gt;</code>:用来定义html文档的元信息，包括文档的编码，文档的关键词、修改时间、作者</li><li><code> &lt;link&gt;</code>:定义了文档于外部资源之间的关系，通常用于链接样式表</li><li><code>&lt;script&gt;</code>:用来加载引入脚本文件，比如常用的JavaScript</li><li><code> &lt;noscript&gt;</code> :</li><li><code>&lt;base&gt;</code>:用来定义文档的基本链接地址，定义的地址是html文档中所有的连接标签的默认链接</li></ul></li></ul><h2 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h2><ul><li><p>html文档由html元素定义</p></li><li><p>html元素由标签对及内容组成，eg:<code>&lt;p&gt;段落-再别康桥&lt;/p&gt;</code></p></li><li><p>标签对由开始标签和结束标签组成，并且开始标签和结束标签之间的就是标签的内容</p></li><li><p>文档的编码方式，不同编码的文件使用不同编码方式解析的结果不一样</p></li></ul><p>如下代码，当utf-8编码是，浏览器打开是正常汉字，如下所示：</p><p><img data-src="/HTML%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE/image-20230810143853200.png" alt="image-20230810143853200"></p><p>当把utf-8改为gbk时，就会出现乱码，如下所示：</p><p><img data-src="/HTML%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE/image-20230810144016870.png" alt="image-20230810144016870"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 头部元素--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GBK<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>html学习dmeo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--标题 6级--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>六级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h2><p>html具有属性，属性可以在元素中添加附加信息，属性以键值对的形式指定，比如链接元素，<code>&lt;a href=&quot;https://zamz.top&quot;&gt;&lt;/a&gt;</code></p><h2 id="HTML样式"><a href="#HTML样式" class="headerlink" title="HTML样式"></a>HTML样式</h2><p>html的样式有三种使用方式，内联样式、内部样式表、外部引用</p><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><h3 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h3>]]></content>
    
    
    <summary type="html">HTML知识-HTML基础标签</summary>
    
    
    
    <category term="HTML教程" scheme="https://resmino.github.io/categories/HTML%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="html" scheme="https://resmino.github.io/tags/html/"/>
    
    <category term="HTML教程" scheme="https://resmino.github.io/tags/HTML%E6%95%99%E7%A8%8B/"/>
    
    <category term="html标签" scheme="https://resmino.github.io/tags/html%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
</feed>
