<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Resmino&#39;s Blog</title>
  
  <subtitle>小张的爬行日记</subtitle>
  <link href="https://resmino.github.io/atom.xml" rel="self"/>
  
  <link href="https://resmino.github.io/"/>
  <updated>2023-07-31T07:53:58.567Z</updated>
  <id>https://resmino.github.io/</id>
  
  <author>
    <name>Resmino</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java字符串</title>
    <link href="https://resmino.github.io/2023/07/31/Java%E6%A0%B8%E5%BF%83%E7%B1%BB/"/>
    <id>https://resmino.github.io/2023/07/31/Java%E6%A0%B8%E5%BF%83%E7%B1%BB/</id>
    <published>2023-07-31T03:38:05.000Z</published>
    <updated>2023-07-31T07:53:58.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、java核心类"><a href="#一、java核心类" class="headerlink" title="一、java核心类"></a>一、java核心类</h1><h2 id="1、字符串"><a href="#1、字符串" class="headerlink" title="1、字符串"></a>1、字符串</h2><h3 id="1-1字符串知识点"><a href="#1-1字符串知识点" class="headerlink" title="1.1字符串知识点"></a>1.1字符串知识点</h3><ol><li><p>String是一个引用类型，本身也是一个<code>class</code>。</p></li><li><p>字符串在String内部是以字符数组char[]表示的</p></li><li><p>写法1：<code>String s=&quot;xiaozhang&quot;;</code></p></li><li><p>写法2：<code>String s= new String(new char[] &#123;&#39;c&#39;,&#39;z&#39;&#125;);</code></p></li><li><p>Java字符串的特点：字符串不可变。因为其内部的<code>private final char[],</code>以及没有提供修改的方法。</p></li><li><p>平时所使用的修改字符串是引用的改变,当创建一个新的字符串时，编译器会先检查在常量池中是否已存在该字符串，若存在则直接使用该字符串的使用；不存在则直接新建一个。</p></li><li><p>由于字符串的不可变，因此对字符串的改变是创建一个新字符串或者是改变引用。</p></li><li><p>对于字符串的比较，需要使用**equals()**方法，切记不要使&#x3D;&#x3D;，因为对于引用类型的变量使用&#x3D;&#x3D;进行比较，比较的是对象的引用。当使用&#x3D;&#x3D;运算符比较两个字符串时，它会检查两个字符串对象的引用是否指向相同的内存地址，而不会比较它们的内容。这意味着即使两个字符串的内容相同，它们可能并不指向相同的内存地址，因此使用<code>==</code>运算符进行比较会得到错误的结果。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token string">"HELLO"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于上面的代码，使用&#x3D;&#x3D;比较两个字符串会输出false，虽然两个字符串内容一样，但由于两个变量的引用不同，所以两个变量是不相等的。</p><h3 id="1-2字符串常用方法"><a href="#1-2字符串常用方法" class="headerlink" title="1.2字符串常用方法"></a>1.2字符串常用方法</h3><ol><li><p>equals()：判断字符串是否相等</p></li><li><p>equalsIgnoreCase()：忽略大小写比较字符串</p></li><li><p>contains(str)：判断字符串是否具有str子串，例如<code>&quot;Hello&quot;.contains(&quot;ll&quot;); // true</code></p></li><li><p>indexOf(i)：根据字符串索引位置获取字符，<code>eg：&quot;Hello&quot;.indexOf(&quot;l&quot;); // 2</code></p></li><li><p>lastIndexOf(ch)：获取字符串中字符ch最后一次出现的索引位置，<code>eg:&quot;Hello&quot;.lastIndexOf(&quot;l&quot;); // 3</code></p></li><li><p>startsWith(str)：判断字符串是否以字串str开头，<code>eg:&quot;Hello&quot;.startsWith(&quot;He&quot;); // true</code></p></li><li><p>endsWith(str)：判断字符串是否以字串str结尾，<code>eg:&quot;Hello&quot;.endsWith(&quot;lo&quot;); // true</code></p></li><li><p>substring(): 根据索引位置进行提取字串，索引从0开始。如果只有一个参数，则从该位置截取字符串，获取后半部分；如果有两个参数，则截取两个位置间的字串，包括两个位置。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">eg<span class="token operator">:</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "llo"</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"ll"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="9"><li><p>trim()：去除字符串首尾两端的空格，trim(): 仅去除字符串首尾的空格字符（ASCII码为32的字符）</p></li><li><p>strip()：去除字符串首尾两端的空格，包括中文的空格字符，包括空格、制表符、换行符等 Unicode 空白字符</p></li><li><p>isEmpty()：判断字符串是否为空</p></li><li><p>isBlank():判断字符串是否是空格组成的字符串</p></li><li><p>replace(s1，s2):替换字符串，将字符串中的s1全部替换为s2 ，<code>“hello”.replace(&#39;l&#39;, &#39;w&#39;); // &quot;hewwo&quot;，所有字符&#39;l&#39;被替换为&#39;w&#39;</code></p></li><li><p>replaceAll(regex,replacement):使用正则表达式替换字符串，regex为正则表达式，将符合正则表达式的字符串替换为replacement字符串</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"A,,B;C ,D"</span><span class="token punctuation">;</span><span class="token comment">//将一个或连续多个， ；或者空白字符替换为，</span>s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[\\,\\;\\s]+"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "A,B,C,D"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="15"><li>split(ch):根据ch将字符串分割为字符串数组</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"A,B,C,D"</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;"A", "B", "C", "D"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="16"><li>join():拼接字符串,将多个字符串按照指定的分隔符连接成一个单一的字符串</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"***"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "A***B***C"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外可以使用加号+来拼接字符串</p><ol start="17"><li>format()和formatted():用于用参数替换字符串中的占位符，两者作用相同，用法不同</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hi %s, your look so %s!"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token string">"xiaozhang"</span><span class="token punctuation">,</span> <span class="token string">"handsome"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hi %s, your are  %d! years old"</span><span class="token punctuation">,</span> <span class="token string">"xiaozhang"</span><span class="token punctuation">,</span><span class="token number">88</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以下是几个常用的占位符：</p><ul><li><code>%s</code>：显示字符串；</li><li><code>%d</code>：显示整数；</li><li><code>%x</code>：显示十六进制整数；</li><li><code>%f</code>：显示浮点数。</li></ul><ol start="18"><li>valueOf(): 将其他类型的变量转为字符串</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "123"</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">12.344</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "45.67"</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="19"><li>toCharArray():将字符串转为字符数组，也可将字符数组转为字符串，示例如下：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String -> char[]</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char[] -> String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下所示：</p><img data-src="/2023/07/31/Java%E6%A0%B8%E5%BF%83%E7%B1%BB/image-20230731152042611.png" class>]]></content>
    
    
    <summary type="html">Java核心类中String字符串知识学习及总结</summary>
    
    
    
    <category term="Java教程" scheme="https://resmino.github.io/categories/Java%E6%95%99%E7%A8%8B/"/>
    
    <category term="Java核心类" scheme="https://resmino.github.io/categories/Java%E6%95%99%E7%A8%8B/Java%E6%A0%B8%E5%BF%83%E7%B1%BB/"/>
    
    
    <category term="Java" scheme="https://resmino.github.io/tags/Java/"/>
    
    <category term="Java核心类" scheme="https://resmino.github.io/tags/Java%E6%A0%B8%E5%BF%83%E7%B1%BB/"/>
    
    <category term="字符拆" scheme="https://resmino.github.io/tags/%E5%AD%97%E7%AC%A6%E6%8B%86/"/>
    
    <category term="String" scheme="https://resmino.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>React安装教程</title>
    <link href="https://resmino.github.io/2023/07/23/React%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://resmino.github.io/2023/07/23/React%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2023-07-23T14:16:35.000Z</published>
    <updated>2023-07-31T03:50:47.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h1><ul><li>安装本地React环境需要Node.js，如果具有Node环境跳过即可。</li><li>如果没有安装则可参考该篇文章安装Node环境，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkxNTY0Ny9hcnRpY2xlL2RldGFpbHMvMTMxMzQ0NzUyP3NwbT0xMDAxLjIwMTQuMzAwMS41NTAx">点击查看<i class="fa fa-external-link-alt"></i></span></li></ul><h1 id="二、React安装"><a href="#二、React安装" class="headerlink" title="二、React安装"></a>二、React安装</h1><ol><li>全局安装React</li></ol><ul><li><p>首先打开命令行，建议以管理员身份</p></li><li><p>输入命令：<code>npm install -g create-react-app</code></p><img data-src="/2023/07/23/React%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/effc4615f0c046f6b07ad6dd6d3a8f35.png" class title="[title]"></li></ul><ol start="2"><li><p>安装完成后，输入命令<code>create-react-app -V</code>查看时候成功</p> <img data-src="/2023/07/23/React%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/effc4615f0c046f6b07ad6dd6d3a8f35.png" class></li><li><p>创建React项目<br> 在自己选定的目录下输入命令：<code>create-react-app reactdemo</code>进行创建项目，注意reactdemo为自己命名的项目名。</p></li></ol>  <img data-src="/2023/07/23/React%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ef2ead85b53842058461b3954832c502.png" class><p>  如上则成功创建一个新的react项目。</p><ol start="4"><li>运行react项目<br> 首先进入刚才创建的项目的根目录下，然后输入命令<code>npm start</code></li></ol>  <img data-src="/2023/07/23/React%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ddba23821fd14cdc9acd9670f03f88ac.png" class><ol start="5"><li>运行成功后的界面，如图所示</li></ol>  <img data-src="/2023/07/23/React%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/756bcf1f59fe449aa2d6c65bad2fd57f.png" class><ol start="6"><li>之后可以通过自己安装的IDE打开该项目，进行编写了。</li></ol>]]></content>
    
    
    <summary type="html">React环境安装配置教程</summary>
    
    
    
    <category term="React" scheme="https://resmino.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://resmino.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://resmino.github.io/2023/07/23/hello-world/"/>
    <id>https://resmino.github.io/2023/07/23/hello-world/</id>
    <published>2023-07-23T10:58:59.511Z</published>
    <updated>2023-07-31T02:53:21.660Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation<i class="fa fa-external-link-alt"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting<i class="fa fa-external-link-alt"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub<i class="fa fa-external-link-alt"></i></span>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">用于测试hexo博客的第一篇文章</summary>
    
    
    
    <category term="测试" scheme="https://resmino.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="hexo" scheme="https://resmino.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
